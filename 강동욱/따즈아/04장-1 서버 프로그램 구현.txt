개발 환경 구축
- 개발 환경 구축의 개요
* 개발 프로젝트를 이해하고 소프트웨어 및 하드웨어 장비를 구축하는 것
- 하드웨어 환경 : 클라이언트와 서버로 구성
* 클라이언트 : PC, 스마트폰
* 서버 : 웹서버(클라이언트로부터 직접 요청받아 처리하는 서버), 웹 애플리케이션 서버(사용자에게 동적인 서비스를 제공하기위해 웹서버로부터 제공받아 가공하는 서버), DB서버(DBMS 운영 서버), 파일서버
- 소프트웨어 환경 : 시스템 소프트웨어와 개발 소프트웨어로 구성
* 시스템 소프트웨어 : OS, 서버프로그램, DBMS
* 개발 소프트웨어 : 요구사항 관리, 설계/모델링, [구현, 빌드, 테스트, 형상관리]도구

서버 개발
- 서버 개발의 개요 | 사용 프로그램 언어 : Java, JavaScript, Python, PHP, Ruby
* 웹 애플리케이션의 로직을 구현할 서버 프로그램을 제작하여 웹 애플리케이션 서버에 탑재하는 것
- 서버 개발 프레임워크 : 특정한 기능을 수행하기 위한 [클래스, 인터페이스]의 집합체
* 서버 프로그램 개발 시 클래스나 인터페이스를 제공하는 소프트웨어
# 구성 : 모델-뷰-컨트롤러(MVC) 패턴 기반 개발
* 서버 개발 프레임 워크 : Spring(JAVA), Node.js(JAVAScript), Django(Python), Codeigniter(PHP), Ruby on Rails(RUBY)
- 서버 프로그램 구현
* 응용 소프트웨어와 동일하게 모듈 및 공통 모듈을 개발한 후, 모듈들을 통합하는 방식으로 구현
* 프레임워크의 특성 : 모듈화, 재사용성, 확장성(다형성), 제어의 역흐름

보안 및 API
- 소프트웨어 개발 보안의 개요 : 기밀성, 무결성, 가용성 유지
* 소프트웨어 개발 과정에서 발생할 수 있는 보안 취약점을 최소화하여 보안 위협으로부터 안전한 소프트웨어를 개발하기 위한 일련의 보안 활동
- 소프트웨어 개발 보안 점검 항목
* 세션(연결) 통제, 입력(유효한) 데이터 검증 및 표현, 보안(인증, 접근제어, 기밀성, 암호화) 기능, 시간 및 상태(동시수행), 에러(오류->사전정의 후 예방) 처리, 코드 오류, 캡슐화(데이터 및 함수), API(보안 취약) 오용
- API(Application Programming Interface)
* 응용 프로그램 개발 시 운영체제나 프로그래밍 언어 등에 있는 라이브러리를 이용할 수 있도록 규칙 등을 정의해 놓은 인터페이스

배치 프로그램
- 배치 프로그램(Batch Program)의 개요
* 여러 작업들을 미리 정해진 일련의 순서에 따라 일괄적으로 처리하는 것
# 자동으로 수행되는 주기에 따라 : 정기 배치(일, 주, 월), 이벤트성 배치(조건 설정), On-Demand 배치(사용자 요청)
# 배치 프로그램이 갖추어야 할 필수 요소 : 대용량 데이터(처리), 자동화(사용자 개입없이 수행되어야 한다), 견고성(시스템 중단 없이), 안전성/신뢰성(오류 추적), 성능(다른 프로그램의 수행을 방해 하면 안된다)
- 배치 스케줄러(Batch Scheduler)
* 일괄 처리 작업이 설정된 주기에 맞춰 자동으로 수행되도록 지원해주는 도구 : 스프링 배치, Quartz

패키지 소프트웨어
- 패키지 소프트웨어(Package Software)의 개요 : 패키지 개발 방식, 70%이상 충족
* 기업에서 일반적으로 사용하는 여러 기능들을 통합하여 제공하는 소프트웨어
- 패키지 소프트웨어의 특징
* 요구사항을 분석하여 업무 특성에 맞게 전용으로 개발되는 소프트웨어와 비교하여 안정성, 라이선스, 생산성 등에서 차이가 있다.
* 품질 검증, 안정적인 이용 가능

		패키지 SW	전용개발 SW
기능요구사항	70%이상		모든 기능 요구 반영
안정성		품질검증		개발자 역량
라이선스		판매자		회사
생산성		절약		개발 시간 및 인력 필요
호환성		보장 없음		설계단계에서 부터 고려 개발
유지보수		즉시 대응 불가	즉시 대응 가능



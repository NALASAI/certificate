모듈 간 공통 기능 및 데이터 인터페이스 확인
- 모듈 간 공통 기능(공통적으로 제공되는 기능) 및 데이터 인터페이스의 개요
* 인터페이스 설계서 - 모듈별로 기능 확인
* 공통적 제공되는 기능, 데이터 인터페이스 확인
- 인터페이스 셜계서 : 교환 처리를 위해 관련된 업무 및 송수신 시스템을 정의한 문서
* 일반적인 인터페이스 설계서
1) 시스템 인터페이스 설계서 : 시스템 인터페이스 목록에 대한 내용 정의
2) 상세기능별 인터페이스 설계서 : 기능별 세부적인 인터페이스 정보 정의
* 정적 동적 모형을 통한 인터페이스 설계서 : 다이어그램을 사용하여 만든 문서(해당되는 인터페이스가 속한 내부시스템 위치 확인, 상호교환되는 트랜잭션 종류 확인 가능)
- 인터페이스 설계서별 모듈 기능 확인
	      설계서  |  명세서
* 외부 모듈 : 송신 전달, 오퍼레이션 사전조건
* 내부 모듈 : 수신, 사후조건
- 모듈 간 공통 기능 및 데이터 인터페이스 확인

모듈 연계를 위한 인터페이스 기능 식별
- 모듈 연계 개요
* EAI방식 : 기업 내 애플리케이션간의 정보 전달, 모듈간 연계 및 통합을 위한 솔루션
ex) Point to Point 방식(1:1로 매칭), Hub & Spoke 방식(중앙 집중형), Message Bus 방식(애플리케이션들 사이에 미들웨어[추가적으로 제공하는 SW]를 두는 방식),
ex) Hybrid 방식([Hub&Spoke, Message Bus] 혼합)
* ESB방식 : 애플리케이션 간 연결, 애플리케이션간 결합도는 낮게 유지, 관리 및 보안유지 쉬움 
- 모듈 간 연계 기능 식별
* 외부모듈
ex) 급여 계산(사전조건[급여 날짜], 기능조건[계산], 사후조건[기본 정보]), 급여 확인(사전 조건[급여 계산], 기능 동작[급여명세서조회], 사후 조건[전표 발생])
* 내부모듈
ex) 급여 전표 발생(사전 조건[전표 발생], 기능 동작[전표 작성], 사후 동작[체크])
- 모듈 간 인터페이스 기능 식별 
* 외부모듈간 요청에의해 수행
* 내부모듈 동작 : 외부모듈의 호출에 의해 수행(인터페이스 기능 식별 -> 인터페이스 구현에 사용)

모듈 간 인터페이스 데이터 표준 확인
- 인터페이스 데이터 표준의 개요
* 인터페이스에 사용되는 데이터 형식 표준화(공통데이터영역, 한쪽의 데이터 변환)
* 확인 순서 : 데이터 인터페이스를 통한 인터페이스 데이터 표준 확인 -> 인터페이스 기능을 통한 인터페이스 표준 확인 -> 1단계, 2단계를 통해 확인된 인터페이스 표준 검토 후 확인  
- 데이터 인터페이스 확인
* 입력및 출력, 데이터 특성 확인
- 인터페이스 기능 확인
* 기능 구현을 위한 데이터 항목 확인 => [데이터항목 및 데이터표준] 수정, 추가, 삭제  
- 인터페이스 데이터 표준 확인
* 데이터 표준, 데이터 항목 검토 후 최종 데이터표준 결정

인터페이스 기능 구현 정의
- 인터페이스 기능 구현의 정의 개요
* 컴포넌트 명세서 확인 - 인터페이스 명세서 확인 - 기능 구현 정의 - 정형화
- 모듈 세부 설계서 : [모듈, 구성요소, 세부적동작] 설계서
* 컴포넌트 명세서(컴포넌트 개요, 내부 클래스 동작, 통신 명세), 인터페이스 명세서(인터페이스 클래스 세부조건, 기능 정의)
- 모듈 세부 설계서 확인
- 인터페이스 기능 구현 정의 : [데이터 표준, 모듈 세부 설계서] 기반으로 일관성있는 정형화된 인터페이스 구현 정의
* 일관성 인터페이스 기능 구현
* 정의된 인터페이스 기능 구현

인터페이스 구현
- 인터페이스 구현 : 송-수신 시스템 간 데이터 교환, 처리 실현하는 작업, 구현 방법, 범위 고려 - 분석 - 인터페이스 구현
* 방법 : 데이터 통신, 인터페이스 앤티티
- 데이터 통신을 이용한 인터페이스 구현
* 데이터 포맷(전송 : 송신) - (해석 : 수신) - JSON, XML 통해 구현
- 인터페이스 앤티티를 이용한 인터페이스 구현 : 시스템과 시스템 사이에 별도의 인터페이스 앤티티를 넣어 상호 연계하는 방식
* 인터페이스 테이블

인터페이스 예외 처리
- 인터페이스 예외 처리의 개요 : 예외 상황(돌발 상황) 발생시 처리하는 절차
- 데이터 통신을 이용한 인터페이스 예외 처리 : 예외케이스를 정의 후 처리 방법 
* 시스템 환경 : 네트워크 불안정			| 예외처리 : 오류 메시지, 404오류[네트워크 상태])
* 송신 데이터 : 송신 데이터 크기, 정합성 체크 오류	| 예외처리 : 사전에 데이터를 정제, 데이터 크기 미리 체크
* 프로그램 자체의 원인 : 논리적 결함			| 예외처리 : 수정, 테스트를 통한 사전예방
- 인터페이스 엔티티를 이용한 인터페이스 예외 처리 : 원인발생 -> 조치 -> 사용자에게 전달
* 인터페이스 데이터 생성 : SQL, 프로그램 오류 | 사용자 알람, 예외 케이스 재발 방지 프로그램 개선
* 인터페이스 테이블에 입력 : SQL 입력 오류 | 입력실패(원인, 결과) -> 테이블 기록 -> 알람 -> 개선
* 인터페이스 데이터 전송 : 데이터베이스 연결 오류(통신결과 -> 테이블에 기록 -> 사용자 및 관리자에게 이메일 전송), 논리적 오류

인터페이스 보안
- 인터페이스 보안의 개요 : 인터페이스의 보안성 향상을 위해, 인터페이스의 보안 취약점 분석 후 적절한 보안 기능을 적용
- 인터페이스 보안 취약점 분석
* 인터페이스 각 구간들의 구현 현황 확인, 보안 취약점 분석
* 영역별로 발생할 수 있는 보안 취약점을 시나리오 형태로 작성
- 인터페이스 보안 기능 적용
* 네트워크 영역 : 스니핑(도청), 데이터 탈취 - 방지, 암호화
* 애플리케이션 영역 : 보안 취약점 - 애플리케이션 보안 강화
* 데이터베이스 영역 : [접근 권한, 보안 취약점] = 암호화, 보안 강화

연계 테스트
- 연계 테스트의 개요
* [시스템 - 시스템 구성요소]간 정상적 동작 확인
- 1)연계 테스트 케이스 작성 : 연계시스템 간의 흐름 분석 ~ 필요한 항목 도출
- 2)연계 테스트 환경 구축 : [테스트 일정, 방법, 절차, 소요시간, 기관과의 협의] 결정
- 3)연계 테스트 수행 : 시험항목, 처리절차 = 실제 실행
- 4)연계 테스트 수행 결과 검증 : [수행 결과 와 예상한 결과] 간 동일여부확인
* 테스트 케이스 검증 방법 : 운영 DB 테이블 건수 확인, 테이블 개봉 후 데이터 확인, 파일 크기, 연계 서버에서 제공하는 모니터링 현황 확인, 로그파일 확인

인터페이스 구현 검증
- 인터페이스 구현 검증의 개요 : 인터페이스 정상 작동 확인
- 인터페이스 구현 검증 도구 : 통합테스트 진행 - 자동화 도구, 
* xUnit(Java, C++ 등 다양한 언어 지원), STAF(서비스 호출 등 다양한 환경 지원), FitNesse(웹 기반 테스크 케이스 설계/실행/결과확인), NTAF(STAF+FitNess통합 방식), Selenium(다양한 웹브라우저 지원), watir(Ruby를 이용한 테스트)
- 인터페이스 구현 감시 도구
* 인터페이스 동작상태-APM
* 애플리케이션 성능 관리도구 - 스카우터, 제니퍼
- 인터페이스 구현 검증 및 감시 도구 선택
- 인터페이스 구현 검증 확인 : [외부 시스템 - 연계 모듈] 간 동작상태 확인, 단계별 오류처리 구현 확인
- 인터페이스 구현 감시 확인 : [외부 시스템 - 연계 모듈] 간 서비스 제공 확인

인터페이스 오류 확인 및 처리 보고서 작성
- 인터페이스 오류 확인 및 처리 보고서의 개요
- 인터페이스 오류 발생 즉시 확인
* 오류 메시지 알람 표시, 오류 SMS발송, 오류 내역 이메일 발송
- 주기적인 인터페이스 오류 발생 확인
* 인터페이스 오류 로그 확인, 인터페이스 오류 테이블 확인, 인터페이스 감시 도구 사용
- 인터페이스 오류 처리 보고서 작성
* [발생시점, 종료시점, 원인, 증상, 처리사항] 정리 문서

ex) 다음중 애플리케이션(Application)의 흐름 모니터링과 성능(Performance) 예측을 통해 최적의 애플리케이션 상태를 보장 및 관리(Management)하는것을 의미하는 용어는? 1. APM | 2.EAI | 3.API | 4.ESB

데이터베이스 설계
- 데이터베이스 설계의 개념 : 사용자 요구 분석 -> 컴퓨터 구조에 따라 변형 -> 특정한 DBMS로 구현
- 데이터베이스 설계 시 고려사항
* 무결성(정확성), 일관성, 회복(시스템 장애 발생 시 직전 상태로 돌아갈수 있어야 한다), 보안, 효율성, 데이터베이스 확장
- 데이터베이스 설계 순서
* 요구조건 분석 - 개념적 설계 - 논리적 설계 - 물리적 설계 - 구현

- 요구 조건 분석 : 사용자 조건 파악(데이터 수집 -> 요구조건 명세 작성)
- 개념적 설계(정보 모델링, 개념화) : 그림, E-R다이어그램
- 논리적 설계(데이터 모델링) : 스키마(개념스키마 평가, DBMS에 의해 서로 다른 논리적 스키마 설계) 설계
- 물리적 설계(데이터 구조화) : 저장장치
- 데이터베이스 구현 : 응용프로그램을 위한 트랜잭션 작성

데이터 모델의 개념
- 데이터 모델의 정의 : (현실)정보 -> 컴퓨터에 표현 -> 단순화, 추상화 -> 개념적 모형
- 데이터 모델의 구성요소
* 개체(표현하는것), 속성(필드), 관계
- 개념적 데이터 모델 : 인간적 이해
- 논리적 데이터 모델 : 컴퓨터 이해
- 논리적 데이터 모델의 품질 검증
* 개체, 속성, 관계, 식별자, 전반적인 품질 검증항목
- 데이터 모델에 표시할 요소
* 구조, 연산, 제약조건

데이터 모델의 구성 요소 - 개체(Entity)
- 개체의 정의 및 특징 : DB에서 표현하려는 것, 개념, 정보단위, 현실세계의 대상
- 개체 선정 방법 : 업무기술서, 담당자 인터뷰, 장부, 전표, DFD(자료저장소)
- 개체명 지정 방법 : 업무에서 사용되는 용어지정, 약어사용X, 단순명사

데이터 모델의 구성 요소 - 속성(Attribute)
- 속성의 정의 및 특징 : 작은 단위, 항목, 특성, 속성수(차수, 디그리)
- 속성의 종류
* 속성의 특성에 따른 분류 : 기본속성(업무 분석), 설계속성(업무 규칙화[속성, 변형]), 파생속성(다른속성에서 영향받음)
* 개체 구성방식에 따른 분류 : 기본키 속성, 외래키 속성(다른 개체), 일반 속성
- 속성 후보 선정 원칙
* 최대한 많이 선택한다
- 속성명 지정 원칙
* 정확해야한다, 혼란이 발생하지 말아야 한다.
데이터 모델의 구성 요소 - 관계(Relationship)
- 관계의 정의 : 논리적 연결, 
- 관계의 형태
* 일대일(1:1), 일대다(1:N), 다대다(N:M) 
- 관계의 종류
* 종속(주/종) 관계, 중복(2개의 개체사이에 2번이상 종속관계가 발생) 관계, 재귀(개체가 자기자신과 관계가 발생) 관계, 배타(개체의속성 혹은 구분자를 기준으로 개체의 특성을 분할) 관계

식별자
- 식별자의 정의 : 하나의 개체내에서 유일하게 구분하는 것
* 대표성 여부 : 주 식별자, 보조 식별자
* 스스로 생성 여부 : 내부 식별자, 외부 식별자
* 단일 속성 여부 : 단일 식별자, 복합 식별자
* 대체 여부 : 원조 식별자, 대리 식별자
- 주 식별자(개체를 대표하는 유일한 식별자/ ex)카드번호, 사원번호)/보조 식별자(주 식별자를 대체하는 식별자)
* 주 식별자의 4가지 특성 : 유일성, 최소성, 불변성, 존재성 
- 내부 식별자(개체 내에서 사용)/외부 식별자(다른 개체와의 관계에서 사용)
- 단일 식별자(1개 속성)/복합 식별자(2개 이상 속성)
- 원조 식별자(가공되지 않은 식별자)/대리 식별자()
- 후보 식별자(각 인스턴스를 유일하게 식별할 수 있는 속성, 1개 이상 후보식별자 존재, 유일하게 식별할 수 있어야 한다, Null값은 없다)

E-R(개체-관계) 모델
- E-R(Entity-Relationship, 개체-관계)모델의 개요 : 1976년 피터 첸 제안, [1:1, 1:N, N:M]과 같은 관계들을 제한없이 나타낼 수 있다.
- E-R 다이어그램 : 기호를 사용하여 시각적으로 표현
* 피터 첸 표기법 : 구성요소[ □ : 개체, ◇ : 관계, ○ : 속성, ◎ : 다중값 속성, ⊖ : 기본키, ○-○-○ : 다중속성, - : 연결 ]
* 정보 공학 표기법(Information Engineering Notation) : 1981년 개발, 구성요소[ | : 필수, ○ : 선택, < : 다중 ]
* 바커 표기법(Barker Notation) : 영국에서 개발, 구성요소[ - : 필수, -┈ : 선택, < : 다중 ]

관계형 데이터 모델
- 관계형 데이터 모델(Relational Data Model)의 개요
* 2차원 표형태(table)로 데이터의 상호관계 정의, [기본키, 외래키]존재, [1:1, 1:다, 다:다]등의 관계를 자유롭게 표현 가능
- 관계형 데이터 모델의 구성
[   고객		주문		]
| 고객번호(1)------------(N)고객 번호	|
|   이름		         주문 번호	|
| 전화번호			|
[   주소				]

관계형 데이터베이스의 구조
- 관계형 데이터베이스의 개요 : Table(표)로 표현, 장점(간결하다, 보기편하다), 단점(성능이 떨어진다)
- 관계형 데이터베이스의 Relation 구조
* [행]튜플 : 튜플의 수 : 카니달리티, 기수
* [열]속성 : DB에서 가장 작은 논리적 단위, ex)항목, 필드, 개체의 특성, 속성의 수 : 차수(Degree)
* 도메인 : 속성이 취할수 있는 값
- 릴레이션의 특징
* 튜플은 모두 상이하다. 
* 속성의 순서, 튜플의 순서는 상관 없다.
* 속성값은 원자값이어야 한다

관계형 데이터베이스의 제약 조건 - 키(Key)
- 키(Key)의 개념 : 튜플을 찾을때 사용

- 후보키(Candidate Key) : 유일하게 식별할수 있는 키, 유일성 및 최소성 만족
- 기본키(Primary Key) : 후보키중 1개 선택한 키, 유일성 및 최소성 만족
- 대체키(Alternate Key) : 후보키에서 기본키를 제외한 나머지 키, 유일성 및 최소성 만족
- 슈퍼키(Super Key) : 튜플을 유일하게 구분하는 키, 유일성만 존재
- 외래키(Foreign Key) : 다른 테이블(릴레이션)의 기본키를 참조하는 키

관계형 데이터베이스의 제약 조건 - 무결성
- 무결성(Integrity)의 개념 : 정확성, ex) [DB값=실제값]

- 개체 무결성(Entity Integrity, 실체 무결성) : 기본키는 중복이 없어야 한다. Null값이 없어야 한다.
- 도메인 무결성(Domain Integrity, 영역 무결성)
- 참조 무결성(Referential Integrity) : 참조 릴레이션의 기본키 값과 동일해야한다 , Null값이 있어도 된다.
- 사용자 정의 무결성 : 사용자가 정의한 제약조건에 만족해야한다.
- 데이터 무결성 강화
* 애플리케이션(데이터 생성, 수정, 삭제 시 무결성 검증하는 코드), 데이터베이스 트리거(트리거 이벤트에 무결성 조건을 실행하는 절차형 SQL 추가한다), 제약조건(데이터베이스에 제약 조건을 설정하여 무결성 유지)

관계대수(절차적 언어) 및 관계 해석(비절차적 언어)
- 관계 해석(Relational Calculus)
* 어떻게 검색하는것이 아닌 무엇을 검색하는것에 중점
* 비절차적인 방식( 과정을 무시하고 결과를 보는 방식 )
* 종류 : 튜플 관계해석, 도메일 관계해석
* ex) 수학 = 술어해석 기반

정규화(Normalization) : 분리
- 정규화의 개요
* 삽입 이상 (Insertion Anomaly) : 데이터 삽입 시 원하지 않는 값들도 함께 삽입되는 현상
* 삭제 이상 (Deletion Anomaly) : 한 튜플을 삭제할 때 의도하지 않은 값들고 함께 삭제되는 현상
* 갱신 이상 (Update Anomaly) : 속성값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 모순이 생기는 현상
- 정규화 과정
* 비정규형 => 1정규형 => 2정규형 => 3정규형 => BCNF => 4정규형 => 5정규형
# 1정규형 : 모든 도메인이 원자값
# 2정규형 : 부분 함수종속 제거, 완전함수종속 만족
# 3정규형 : 이행적 함수종속 제거
# BCNF : 결정자가 모두 후보키
# 4정규형 : 다치종속 제거
# 5정규형 : 조인종속 이용

반정규화(Denormalization)
- 반정규화의 개념 : 정규화된 데이터 모델을 다시 통합하는 과정, 장점(성능 향상, 관리의 효율성 증가), 단점(데이터의 일관성 감소)
- 테이블 통합 : 테이블과 테이블을 합쳐서 사용(Join), 고려사항 : 데이터 검색은 간편하지만 레코드 증가로 인해 처리량 증가, [입력, 수정, 삭제]등 규칙이 복잡해질 수 있다, [Not Null, Default, Check]등 제약조건 설계 어려움
- 테이블 분할 : 수평분할, 수직분할
- 중복 테이블 추가
* 정규화로 인해 수행 속도가 느려지는 경우
* 많은 범위의 데이터를 자주 처리해야 하는 경우
* 특정 범위의 데이터만 자주 처리해야 하는 경우
* 처리 범위를 줄이지 않고는 수행 속도를 개선할 수 없는 경우
* 집계 테이블 추가, 진행 테이블 추가
- 중복 속성 추가 : Join했을때 데이터 조회하는 경로를 단축하기 위해 사용
* Join이 자주 발생하는 속성인 경우
* 접근하는 경로가 복잡한 경우
* 기본키가 여러개의 속성으로 구성되는 경우
* 고려사항 : 데이터의 일관성, 무결성을 유지할수 있어야 한다.

시스템 카탈로그
- 시스템 카탈로그(System Catalog)
* 카탈로그 : DBMS 스스로 생성 유지, DB내 특별한 테이블의 집합체
* 카탈로그 저장장소 : 자료 사전에 저장, 저장된정보(메타데이터)
* 사용자가 검색할수는 있으나 수정은 불가능하다.
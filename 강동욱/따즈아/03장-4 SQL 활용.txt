프로시저(Procedure)
- 프로시저의 개요
* SQL을 활용하여 특정한 기능을 수행하기위해 만들어진 트랜잭션 언어, 호출해서 사용, 미리저장해둔 SQL 작업
* Stored(스토어드) 프로시저 라고도 한다.
- 프로시저 생성
* CREATE[OR REPLACE(동일한 프로시저 기존 프로시저 대체)] PROCEDURE 이름(파라미터) BEGIN 프로시저 BODY; END;
* 파라미터[ in : 값 전달, out : 값 반환, inout : 전달/반환, 매개변수명(자료형) ]
- 프로시저 실행
* EXECUTE 프로시저명;
* EXEC 프로시저명;
* CALL 프로시저명;
- 프로시저 제거
DROP PROCEDUR 프로시저 이름

트리거(Trigger)
- 트리거(Trigger)의 개요
* DB 시스템에서 데이터의 삽입, 갱신, 삭제 등의 이벤트가 발생할 때마다 관련 작업이 자동으로 수행되는 절차형 SQL
* DB 저장, DCL의 사용이 불가능
- 트리거의 구성
* DECLARE
* EVENT
* BEGIN
*	CONTROL
*	SQL
*	EXCEPTION
* END
- 트리거의 생성
* CREATE TRIGGER
* 
* REFERENCING AS
* FOR EACH ROW
* 
* BEGIN
* 
* END;
- 트리거의 제거
* DROP TRIGGER 트리거명;

사용자 정의 함수
- 사용자 정의 함수의 개요
* SQL을 사용하며 일련의 작업을 연속적으로 처리, 종료 시 처리 결과를 단일값으로 반환하는 절차형 SQL
* RETURN을 통해 값을 반환, 출력 파라미터가 없음
* INSERT, DELETE, UPDATE를 통한 테이블 조작은 할 수 없고 SELECT를 통한 조회만 가능
* 프로시저를 호출해 사용할 수 없음
* SUM( ), AVG( ) 등의 함수처럼 DML문에서 반환값을 활용하기 위한 용도로 사용
- 사용자 정의 함수의 구성
* DECLARE - 명칭
* 
* BEGIN
* 	CONTROL - 조건문, 반복문
* 	SQL	- Select
* 	EXCEPTION - 예외상황
* 	RETURN - 반환
* END
- 사용자 정의 함수 생성
* CREATE [OR REPLACE]	FUNCTION - 사용자 정의 함수(파라미터 : in, 매개변수명, 자료형)
* 
* BEGIN
* 	사용자 정의 함수 BODY;
* 	RETURN 반환값;
* END;
- 사용자 정의 함수 실행
* select 사용자 함수 이름 from 테이블
* Insert into 테이블(속성명) values 사용자 정의 함수 이름
* delete from 테이블 where 속성명 = 사용자정의함수명
* update 테이블명 set 속성명=사용자정의함수명
- 사용자 정의 함수 제거
* DROP FUNCTION 사용자정의함수명;

DBMS 접속 기술
- DBMS 접속의 개요
* 사용자가 데이터를 사용하기 위해 응용 시스템을 이용하여 DBMS 접근하는 것
- DBMS 접속 기술
* JDBC(Java DataBase Connectivity) : 1997년 마이크로시스템에서 출시, [JAVA, SQL]포함, JDBC를 사용하기위해 드라이버 필요
* ODBC(Open DataBase Connectivity) : 1992년 마이크로소프트에서 출시, 개발언어 관계없이 사용가능
* MyBatis : SQL Mapping 기반 오픈 소스 접속 프레임워크
- 동적 SQL(Dynamic SQL)
* 개발언어에 사용되는 SQL을 문자열 변수에 넣어서 사용, SQL구문을 동적으로 변경하여 처리 가능
* 사용자로부터 SQL일부나 전부를 입력받아 실행 가능, 값이 입력되지 않으면 NVL 함수 사용 필요없다.

SQL 테스트
- SQL 테스트의 개요
* SQL이 작성의도에 맞게 실행하는지 검증하는것
* 구문오류 및 참조오류
* 디버깅을 통해 로직검증, 결과를 통해 확인
- 단문 SQL 테스트
* DDL, DML, DCL 포함
* SQL, TCL 테스트
* TCL : commit, rollback, savepoint
- 절차형 SQL 테스트
* 오류나 경고 메시지가 상세하게 출력되진 않는다

ORM(Object-Relational Mapping)
- ORM(Object-Relational Mapping)의 개요
* [객체지향 프로그램 - 객체, 관계형 DB - 데이터] 객체-데이터 연결 기술
* 가상의 객체지향 데이터베이스 -> 프로그래밍의 코드, 데이터 연결
* 독립적으로 사용 - 재사용 가능, 유지보수 쉬움
- ORM프레임 워크
* JAVA(Hibernate, EclipseLink), C++(ODB), Python(Django), iOS(DatabaseObjects), .NET(Nhibernate), php(Doctrine)
- ORM의 한계
* SQL 자동작성 - 의도되로 SQL문이 작성되었는지 확인 필요

쿼리 성능 최적화
- 쿼리 성능 최적화의 개요
* 성능 측정 도구인 APM을 사용하여 최적화 할 쿼리 선정
* 옵티마이저(효율적으로 수행되도록 최적경로 선정)가 수립한 실행계획 검토
- 실행 계획(Execution Plan)
* EXPLAIN 명령어 -> 그래픽, 텍스트
* 연산순서 - 조인, 검색, 필터, 정렬
- 쿼리 성능 최적화(SQL 코드, 인덱스 재구성)
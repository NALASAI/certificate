소프트웨어 아키텍처 : 기본구조, 관계
- 소프트웨어 아키텍처의 설계 : 좋은 품질, 비기능적 요구사항(품질 및 제약조건), 기능적 요구사항(시스템)
* 원칙, 지침, 소통도구
- 모듈화 : 나누기
- 추상화 : 간략화
* 과정추상화 : 자세하게 수행과정에대해 정의하지 않는다. 전반적인 흐름파악
* 데이터 추상화 : 데이터 세부적인 속성 및 용도는 정의하지 않는다. 데이터의 구조를 대표할수있는 표현으로 대체
* 제어 추상화 : 이벤트를 발생시키는 정확한 절차 및 방법을 대표할수 있는 표현으로 대체
- 단계적 분해 : 하향식 설계 
- 정보은닉
- 소프트웨어 아키텍처의 품질 속성
* 시스템 측면 : 성능, 보안, 가용성(장애 X), 기능성, 사용성
* 비즈니스 측면 : 시장적시성, 비용, 예상 시스템 수명
* 아키텍처 측면 : 개념적 무결성(시스템 및 구성요소들이 일관성을 유지하는가), 정확성, 구축가능성, 변경 여부, 적응성, 대체성
- 소프트웨어 아치텍처의 설계과정
* 설계 목표 설정 : 개발 방향, 우선순위, 목표설정
* 시스템 타입결정 : 아키텍처 패턴 선택
* 아키텍처 패턴 적용 : 아키텍처 참조 후 시스템 표준
* 서브시스템 구체화 : 상호 작용을 위한 동작
* 검토

아키텍처 패턴 : 전형적 해결방식, 기본적 윤곽
- 아키텍처 패턴의 장점 : 개발시간 단축, 고품질 소프트웨어, 안정적 개발가능, 의사소통, 구조이해
- 종류 : 레이어 패턴, 클라이언트-서버 패턴, 파이프-필터 패턴, 모델-뷰-컨트롤러 패턴
* 레이어 패턴
* 클라이언트-서버 패턴
* 파이프-필터 패턴 : 캡슐화 -> PIPE -> 전송
* 모델-뷰-컨트롤러 패턴 : Model View Controller(MVC)
* 기타
# 마스터-슬레이브 패턴, 브로커 패턴, 피어-투-피어 패턴
# 이벤트-버스 패턴, 블랙보드 패턴, 인터프리터 패턴

객체지향
- 객체 : 데이터와 그 데이터에 관련되는 동작을 모두 포함한 개념
- 객체지향 : 실 세계의 개체(Entity)를 속성(Attribute)와 메소드(Method)가 결합된 형태의 객체(Object)로 표현하는 개념
- 구성요소
* 객체 : 데이터 + 연산, 메소드 : 객체의 구체적인 연산을 정의한 것
* 클래스(Class) : 유사한 객체들을 모아 공통된 특성을 표현한 것, 클래스로부터 생성된 새로운 객체를 인스턴스(Instance)라고 한다.
* 메시지(Message) : 객체들 간의 상호작용이 일어나기 위해서 메시지가 필요하며, 메시지를 통하여 객체의 동작이 수행된다.
- 객체 지향기법
* 캡슐화(Encapsulation) : 정보은닉
* 상속(Inheritance) : 부모로부터 물려받음
* 추상화(Abstraction) : 단순화
* 다형성(Polymorphism) : 각자 가지고있는 고유한 방법으로 나타내는것

모듈
- 모듈화
* 모듈이란 소프트웨어를 각 기능별로 분할하는 것으로, 소프트웨어 구조를 이루는 기본단위이다.
* 모듈화는 독립성이 높아야 하며, 모듈의 독립성은 결합도와 응집도에 의해 측정된다
- 결합도(Coupling)
* 한 모듈과 다른 모듈간의 상호의존도를 측정하는 것으로 독립적인 모듈이 되기 위해서는 결합도가 약해야 한다
결합도 강함	내용 결합도(Content Coupling) : 한 모듈이 다른모듈의 내용을 참조
		공통 결합도(Common Coupling) : 공통 자료 영역에서 참조
	 ↕	외부 결합도(External Coupling) : 외부 선언 데이터를 다른 모듈에서 참조
		제어 결합도(Control Coupling) : 제어요소
		스탬프 결합도(Stamp Coupling) : 자료구조
결합도 약함	데이터 결합도(Data Coupling) : 모듈과 모듈간의 자료요소로만 구성
- 응집도(Cohesion)
* 한 모듈 내에 있는 구성 요소들이 서로 관련되어 있는 정도를 의미하며, 관련성을 측정하는 것으로 응집도가 높도록 설계되도록 해야 한다.
응집도 강함	기능적 응집도(Functional Cohesion) : 단일문제
		순차적 응집도(Sequential Cohesion) : 출력데이터 = 다음활동의 입력데이터
		통신적(교환적) 응집도(Communicational Cohesion) : 동일한 입력, 출력 => 서로다른 기능
	↕	절차적 응집도(Procedural Cohesion) : 구성요소들이 순차적으로 수행
		시간적 응집도(Temporal Cohesion) : 시간에 처리되는 기능
		논리적 응집도(Logical Cohesion) : 유사한 성격
응집도 약함	우연적 응집도(Coincidental Cohesion) : 서로 관련없는 요소

공통 모듈
- 개념
* 전체 프로그램의 기능 중 공통적으로 사용할 수 있는 모듈
* 공통 모듈 명세 작성 원칙
# 정확성 : 기능 필요하다, 정확
# 명확성 : 중의적 해석 X
# 완전성 : 모든 것
# 일관성 : 상호 충돌 X
# 추적성 : 출처, 관계, 파악

코드
- 주요기능 종류
* 식별기능 : 성격에 구분 가능
* 분류기능 : 기준
* 배열기능 : 의미 부여
- 코드의 종류
* 순차코드 : 발생순서
* 블록코드 : 공통성(블록구분)
* 10진코드 : 10진 분할방법, 도서분류코드
* 그룹분류코드 : (대, 중, 소)분류
* 연상코드
* 표의 숫자 코드 : 길이, 넓이, 부피, 지름
* 합성 코드 : 2개 이상의 코드를 조합

디자인 패턴 : 생성패턴 5개, 구조패턴 7개, 행위패턴 11개
- 생성패턴
* 추상팩토리 : 클래스 의존 X, 연관, 의존그룹 -> 추상적 표현
* 빌더 : 조합하여 생성
* 팩토리 메소드 : 객체생성 -> 서브클래스처리 -> 캡슐화 [상위 : 인터페이스 | 서브클래스 생성]
* 프로토타입 : 원본 객체 -> 복제
* 싱글톤 : 하나의 객체를 생성 -> 어디서든 참조 가능 = 여러 프로세스는 동시에 참조하는것이 불가능하다
- 구조패턴
* 어댑터 : 호환성 안되는 클래스를 다른 클래스가 이용가능하도록 해주는 패턴
* 브리지 : 기능, 구현 => 별도 클래스에서 구현
* 컴포지트 : 복합개체, 단일개체, 구분없이
* 데코레이터 : 객체 결합 -> 능동적 기능 확장, 부가적 기능 추가 객체
* 퍼씨드 : 인터페이스 구성, 서브클래스
* 플라이웨이트 : 인스턴스 매번생성 X, 가능한 공유해서 사용(메모리 절약)
* 프록시 : 접근 어려운 객체 -[프록시(인터페이스 역할)]> 연결객체
- 행위패턴
* 책임 연쇄
* 커맨드 : 요청 -> 캡슐화 -> 재이용
* 인터프리터 : 언어 + 문법표현 = SQL, 통신프로토콜 개발 방식
* 반복자 : 접근이 자주 일어나는것, 동일한 인터페이스 순차적 접근
* 중재자 : 복잡한 [과정(상호작용)] -> 캡슐화 -> 객체로 정의
* 메멘토 : 되돌리기 제공 패턴
* 옵서버 : 하나의 객체상태가 변화되었을 경우 상속 개체들에게 변화상태를 전달
* 상태 : 동일한 동작 -> 다르게 처리
* 전략 : 개별적으로 캡슐화 상호 교환
* 템플릿 메소드 : 상위클래스 - 골격정의, 하위클래스 - 세부처리 구체화
* 방문자 : 처리기능 분리, 별도의 클래스
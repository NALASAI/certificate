소프트웨어 패키징
- 소프트웨어 패키징의 개요
* [모듈 - 실행파일] - 묶어서 배포용 설치파일로 제작, 사용자 중심, 모듈화 패키징
- 패키징 시 고려사항 : OS, CPU, 메모리, 최소환경, 메뉴얼, 고객편의, 패키징의 변경사항, 개선 관리
- 패키징 작업 순서
* 온라인 배포 : 인터넷 다운로드
* 오프라인 배포 : CD, DVD, USB등으로 배포
* 배포 과정
* 기능식별(코드기능) - 모듈화(기능단위) - 빌드진행(실해파일) - 사용자 환경분석 - 패키지 적용 시험 - 패키징 변경 개선 - 배포

릴리즈 노트
- 릴리즈 노트(Release Note)의 개요
* 소프트웨어 최종 사용자들과 공유하는 문서, 테스트, 사양, 소프트웨어 기능, 서비스, 개선사항 - 사용자 공유
- 릴리즈 노트 초기 버전 작성 시 고려사항
* 머리말, 개요, 목적, 문제 요약, 재현항목, 수정/개선 내용, 사용자 영향도, 소프트웨어 지원 영향도, 노트, 면책 조항, 연락처
- 릴리즈 노트 추가 버전 작성 시 고려사항
* 버그, 업그레이드, 기능추가, 사용자요청사항, 오류발생 - 긴급 수정 - 버전 출시
- 릴리즈 노트 작성 순서
* 모듈식별 - 릴리즈 정보 확인 - 릴리즈 노트 개요 작성 - 영향도 체크 - 정식 릴리즈 노트 작성 - 추가 개선 항목 식별

디지털 저작권 관리(DRM)
- 저작권의 개요 : 독점적 권리, 타인의 침해가 없다
- 디지털 저작권 관리(DRM : Digital Right Management)의 개요
- 디지털 저작권 관리의 흐름도
* 클리어링 하우스, 콘텐츠 제공자, 패키저
* 콘텐츠 분배자(유통), 콘텐츠 소비자, DRM 컨트롤러(통제), 보안컨테이너(보안장치)

콘텐츠 제공자 : 클리어링 하우스에 콘텐츠 등록, 콘텐츠 분배자에게 콘텐츠 등록
콘텐츠 분배자 : 클리어링 하우스에 콘텐츠 요청, 콘텐츠 소비자에게 다운로드허가
콘텐츠 소비자 : 클리어링 하우스에 요금 지불후 콘텐츠 사용, 콘텐츠 분배자에게 라이선스 요청

- 디지털 저작권 관리의 기술 요소
* 암호화, 키 관리, 암호화 파일 생성, 식별 기술, 저작권 표현, 정책 관리, 크랙방지, 인증

소프트웨어 설치 메뉴얼 : 설치과정 설명서
- 소프트웨어 설치 메뉴얼의 개요
* 사용자 기준, 시작 ~ 완료과정 설명, (오류메시지, 예외상황 기술)
- 서문
* 문서 이력(버전별 내용), 설치 메뉴얼의 주석(주의사항 참고사항), 설치도구의 구성(LOG폴더), 설치 환경 체크 항목(CPU, 메모리, OS)
- 기본사항
* 소프트웨어 개요(주요 기능), 설치 관련 파일, 설치 아이콘, 프로그램 삭제, 관련 추가정보
- 설치 메뉴얼 작성방법 : [설치과정 - 이해 - 설치화면] 과정을 캡처하여 순서대로 설명
* 설치화면, 설치 이상 메시지 설명, 설치 완료 및 결과, FAQ(다양한 상황에 대한 처리방법)
* 설치 시 점검 사항(사용자의 설치환경), 네트워크 환경 및 보안(보안 및 방화벽 관련 설명), 고객 지원 방법(전화번호 및 이메일), 준수 정보 & 제한 보증(준수상황 및 저작권자)
- 설치 메뉴얼 작성 순서
* 기능 식별(목적 및 기능) -> UI분류 -> 설치파일확인(백업파일) -> UnInstall절차 확인 -> 이상 CASE 확인(다양한 CASE 대처 방법) -> 최종 메뉴얼 적용

소프트웨어 사용자 메뉴얼 : 사용하면서 일어나는 일들에 대한 설명서
- 소프트웨어 사용자 메뉴얼의 개요 : 업그레이드 메뉴얼 버전 관리, 컴포넌트 단위로 메뉴얼 작업		* 컴포넌트 : 독립적인 기능 수행 단위
- 서문
* 문서 이력, 설치 메뉴얼의 주석(사용시 중요내용, 사용자에 대한 환경 기술), 기록 보관 내용(필요한 기술 지원, SW명칭, 구입날짜)
- 기본 사항
* 소프트웨어 개요, 소프트웨어 사용 환경, 소프트웨어 관리, 모델버전별 특징, 기능 인터페이스 특징, 소프트웨어 구동 환경
- 사용자 메뉴얼 작성방법
* 사용자 화면, 주요기능 분류, 응용 프로그램 및 설정(기본값), 장치 연동, 네트워크 환경, 프로필(Profile) 안내(구동환경 점검), 고객 지원 방법(기술지원, 이메일, 전화번호), 준수정보 제한 보증(저작권자 소유권 정보)
- 사용자 메뉴얼 작성 순서
* 기능 식별 -> 사용자 화면 분류 -> 사용자 환경 파일 확인 -> 초기화 절차 확인 -> 이상 CASE 확인 -> 최종 메뉴얼 적용

국제 표준 제품 품질
- 국제 표준 제품 관련 품질
* 국제 표준 제품 관련 품질 특성의 분류
# 제품 품질 표준 : ISO/IEC 9123(측정 기준 제시, 기능성/신뢰성/사용성/효율성/유지보수성/이식성 판단) , ISO/IEC 14598(SW 제품 평가 프로세스, 평가모듈), ISO/IEC 12119(패키지 소프트웨어 품질), ISO/IEC 25000(품질 모형, 품질 메트릭, 품질 요구사항, 품질 평가 기술)
# 프로세스 품질 표준 : ISO/IEC 9000(품질 경영, 보증 규격), ISO/IEC 12207(Life Cycle 프로세스), ISO/IEC 15054(프로세스 표준 모델), ISO/IEC 15288(시스템 생명주기), CMMI(프로세스 표준모델)
* ISO/IEC 12119 평가 절차
# 제품 설명서 시험(요구, 권고사항) - 사용자 문서 지침(완전성, 정확성, 일관성, 이해성) - 실행 프로그램 시험(프로그램, 데이터, 신뢰성) - 시험 기록 - 시험 보고서 작성
* ISO/IEC 14598 특징
# 반복성(Repeatability), 재현성(Reproducibility), 공정성(Impartiality), 객관성(Objectivity)

소프트웨어 버전 등록
- 소프트웨어 패키징의 형상관리
* 소프트웨어 변경 사항 - 관리 - 활동, 소프트웨어 개발 전체단계
- 형상관리의 중요성
* 소프트웨어 변경사항 체계적으로 추적 및 통제, 무절제한 변경 방지
- 형상 관리 기능
* 형상 식별(형상관리대장[이름, 관리번호, 트리구조로 제작]), 버전 제어, 형상 통제(변경 요구 검토), 형상 감사(기준선 승인), 형상 기록(기록 관리)
- 소프트웨어의 버전 등록 관련 주요 용어
* (중)저장소(최신버전파일, 변경내역), (중)가져오기(파일 복사), 체크아웃(저장소 파일 받기), 체크인(새로운 버전 갱신), 커밋(버전 충돌 알림 후 수정 및 갱신 완료), (중)동기화(최신버전으로 작업공관 동기화)
- 소프트웨어 버전 등록 과정
* 가져오기 -> 인출 -> 예치 -> 동기화 -> 차이 
# 가져오기 : 신규파일추가 -> 저장소 -> 저장소에있는 파일을 자신의 작업공간으로 가져옴(인출한 파일) -> 수정 후 저장소 예치 

소프트웨어 버전관리 도구
- 소프트웨어 버전관리 도구 개요	
* 소프트웨어 버전관리 도구란?
# 제품소프트웨어의 신규 개발, 변경, 개선과 관련된 수정 내역을 관리하는 도구
* 소프트웨어 버전관리 도구 유형
# 공유 폴더 방식 : 초기 방식
# 클라이언트 / 서버 방식 : 최신 방식
# 분산 저장소 방식 : 최신 방식
- 소프트웨어 버전관리 도구별 특징 : 가장많이 사용되는 도구(SVN, Git)
* CVS : 서버/클라이언트 구성, 다수의 인원이 동시에 OS접근가능
* SVN : 개별 프로젝트, CVS장점, 단점개선 후 2000년 발표, 표준으로 사용
* RCS : 소스파일 수정 - 1사람 제한, 잠금
* Bitkeeper : 대규모 프로젝트, 빠른속도로 사용하도록 개발
* Git : 오픈소스, 속도, 분산형, 대형프로젝트
* Clear Case : IBM제작, 복수 서버, 복수 클라이언트
- 소프트웨어 버전관리 도구 사용 시 유의점
* 형상관리 지침에 의거 버전에 대한 정보를 언제든지 접근할 수 있어야 함
* 개발자, 배포자 이외에 불필요한 사용자가 소스 접근할 수 없도록 해야 함
* 동일한 프로젝트 파일에 대해서 여러 개발자가 동시 개발할 수 있어야 함
* 에러 발생 시 최대한 빠른 시간 내에 복구 필요
- 제품 소프트웨어에 소프트웨어 버전관리 도구 활용 방안
* 공동 개발 및 작업 관리 : 2명 이상의 개발자가 수정할수 있어야 한다
* 버전 백업 및 복구 : 이전 버전
* 여러 버전 솔루션 작업

빌드 자동화 도구
- 소프트웨어 빌드 자동화 도구 개요
* 소프트웨어 빌드 자동화 도구란? 저장소에 있는 소스를 자동으로 읽어서 빌드하여 실행파일을 만드는 도구
- 온라인 빌드 자동화 도구, JenKins(젠킨스)
* 빌드 자동화 도구로서 가장 많이 활용되는 도구이다
* 지속적 통합관리를 가능하게 한다. 다양한 버전관리 도구를 지원한다.
* 임의의 쉘 스크립트와 윈도우 배치 명령까지 실행 시킬 수 있다.
* 쉬운 설치, 친숙한 GUI, 저장소 부하 감소, 실시간 피드백, 분산필드, 3D Part 플러그인, 타 도구와 통합지원
- 안드로이드 환경에 적합한 도구, Gradle(그래들) : 오픈소스
* 그래들(Gradle)은 여러가지 언어의 빌드 환경을 구성할 수 있다.
* 안드로이드 개발 환경에서 빌드 자동화 도구로 사용된다.
* 그래들 스크립트는 Groovy를 사용해서 만든 DSL이다.		#DSL = Domain Specific Language
* 모든 그래들 빌드는 하나 이상의 Projects로 구성된다.



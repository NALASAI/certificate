소프트웨어 개발 방법론
- 소프트웨어 개발 방법론의 개요 
* 소프트웨어 개발, 유지보수 등에 필요한 여러 가지 일들의 수행 방법 과 각종 기법 및 도구를 체계적으로 정리하여 표준화한 것이다.
* 최종 목표 : 소프트웨어 생산성 향상, 품질 향상
- 구조적 방법론
* 정형화된 분석 절차에 따라 사용자 요구사항을 파악하여 문서화하는 처리(Precess)중심의 방법론이다.
* 목적 : 프로그램 코드 생성
* 과정 : 타당성 검토 -> 계획 -> 요구사항 -> 설계 -> 구현 -> 테스트 -> 운용 -> 유지보수
- 정보공학 방법론
* 정보 시스템의 개발을 위해 상호 연관성 있게 통합 및 적용하는 자료 중심의 방법론
* 정보전략 계획 수립 -> 업무영역 분석 -> 설계 -> 구축
* 개발 주기를 이용하여 대규모 정보 시스템을 구축하는데 적합

소프트웨어 개발 방법론
- 객체지향 방법론
* 기계의 부품을 조립하듯이 객체들을 조립해서 필요한 소프트웨어를 구현하는 방법론
* 구성 요소 : (객체[데이터+함수], 클래스[공통된 객체집합], 메시지[요구사항]), 기본원칙 : (캡슐화[데이터, 함수 묶는다], 정보은닉[숨기기], 추상화[단순화], 상속성[상위->하위], 다형성[고유한 방법 표현])
* 순서 : 요구분석 -> 설계 -> 구현 -> 테스트검증 -> 인도
- 컴포넌트 기반(CBD : Component Based Design) 방법론
* 컴포넌트[문서, 소스코드, 모듈화]를 조합하여 하나의 새로운 애플리케이션을 만드는 방법론
* 재사용 가능 -> 시간 및 노력 감소, [생산성, 품질] 향상
* 순서 : 개발 준비 -> 분석 -> 설계 -> 구현 -> 테스트 -> 전개 -> 인도
- 애자일(Agile) 방법론 : 사용자 요구사항에 적극 대응한다.
* 일정한 주기를 반복하면서 개발 과정을 진행하는 방법론, 급변하는 요구사항에 적합하다
* 종류 : 익스트림 프로그래밍 XP, 스크럼, 칸반, 크리스탈
* 순서 : 사용자 스토리 -> [계획 -> 개발 -> 승인테스트] 반복
- 제품 계열 방법론
* 특정 제품에 적용하고 싶은 공통된 기능을 정의하여 개발하는 방법론

비용 산정 기법
- 소프트웨어 비용 산정의 개요
* 소프트웨어의 개발 규모를 소요하는 인원, 자원, 기간 등으로 확인하여 필요한 비용을 산정하는 것
* 하향식 비용 산정 기법과 상향식 비용 산정기법이 있다.
- 소프트웨어 비용 결정의 요소
* 프로젝트 요소 : 제품 복잡도[SW별 난이도], 시스템 크기[규모에 맞는 시스템], 요구되는 신뢰도[필요한 기능 수행]
* 자원 요소 : 인적 자원[능력, 자질], 하드웨어 자원[장비], 소프트웨어 자원
* 생산성 요소 : 개발자 능력[전문적 지식, 경험], 개발 기간

비용 산정 기법 - 하향식
- 하향식 비용 산정 기법의 개요
* 과거의 유사한 경험을 바탕으로 전문 지식이 많은 개발자들이 참여한 회의를 통해 비용을 산정
- 전문가 감정 기법
* 조직 내에 있는 경험이 많은 두명 이상의 전문가에게 비용 산정을 의뢰하는 기법
* 장점 : 가장 편리한 방법, 신속하게 처리가능
* 단점 : 개인적이다, 주관적이다, 새로운 프로젝트 경험 없음
- 델파이 기법
* 전문가의 감정 기법의 주관적인 편견을 보완하기 위해 많은 전문가의 의견을 종합하여 산정하는 기법

비용 산정 기법 - 상향식
- 상향식 비용 산정 기법의 개요
* 프로젝트의 세부적인 작업 단위별로 비용을 산정한 후 집계하여 전체 비용을 산정
* 종류 : LOC, 개발단계별 인월수기법, 수학적 산정기법
- LOC(원시 코드 라인 수 : Source Line of Code)기법
* 소프트웨어 각 기능의 원시 코드 라인 수의 비관치(B)[가장 많이 측정된 라인수], 낙관치(A)[가장 적게 측정된 라인수], 기대치(M)[측정된 모든 코드 라인수의 평균]를 측정하여 예측치를 구하고 이를 이용하여 비용을 산정
* 예측치 : A+4M+B/6
* 산정 공식 : 노력(인원) = 개발기간 X 투입 인원 = LOC / 1인당 월평균 생산 코드 라인 수
* 개발 비용 = 노력(월) X 단위 비용(1인당, 월)
* 개발 기간 = 노력(월) / 투입인원
* 생산성 = LOC / 노력(인X월)

수학적 산정 기법
- 수학적 산정 기법의 개요
* COCOMO 모형, Putnam 모형, 기능 점수(FP) 모형이 있다.
- COCOMO 모형 개요
* 보헴(Bohem)이 제안, LOC(원시 코드 라인 수)[SW 종류에 따라 다르게 산정된다]에 의한 비용 산정
- COCOMO의 소프트웨어 개발 유형
* 조직형(Organic Mode) : 5만 라인 이하의 소프트웨어를 개발하는 유형, 사용처[중소규모 소프트웨어, 일괄자료처리, 사무처리]
* 반분리형(Semi-Detached Mode) : 30만 라인 이하의 소프트웨어를 개발하는 유형, 사용처[운영체제 , DBMS]
* 내장형(Embedded Mode) : 30만 라인 이상의 소프트웨어를 개발하는 유형, 사용처[신호기제어, 미사일 유도시스템]
- COCOMO 모형의 종류
* 기본(Basic)형 : 소프트웨어 크기와 개발 유형만을 이용하여 비용을 산정
* 중간(Intermediated)형 : 기본형의 공식을 토대로 사용하나, 4가지 특성의 15가지요인
* 발전(Detailed)형 COCOMO : 개발 공정별로 보다 자세하고 정확하게 노력을 산출
- Putnam 모형
* 소프트웨어 생명 주기의 전 과정 동안에 사용될 노력의 분포를 가정해 주는 모형
* 시간에 따른 함수로 표현되는 곡선 : Rayleigh-Norden - 노력분포도 기초
* 기간이 증가할 시 프로젝트 적용하는 인원, 노력 감소
- 기능 점수(FP) 모형
* 총 기능 점수를 산출하며 총 기능 점수와 영향도를 이용하여 기능 점수(FP)를 구한 후 이를 이용해서 비용을 산정하는 기법

소프트웨어 개발 방법론 결정
- 소프트웨어 개발 방법론의 개요
* 프로젝트 관리와 재사용 현황을 소프트웨어 개발 방법론에 반영하고, 확정된 소프트웨어 생명 주기와 개발 방법론에 맞춰 소프트웨어 개발 단계, 활동, 작업, 절차 등을 정의
* 프로젝트 관리 유형[최소의 비용으로 사용자들을 만족] : 일정 관리[순서, 기간], 비용 관리, 인력 관리[팀, 조직 관리], 위험 관리[대처, 통제], 품질 관리[보증]
- 소프트웨어 개발 방법론 결정 절차
* 프로젝트 관리와 재사용 현황을 소프트웨어 개발 방법론에 반영한다
* 개발단계별 작업 및 절차를 소프트웨어 생명 주기에 맞춰 수립한다.
# 기본 생명주기, 지원 생명주기, 조직생명주기 => 프로세스 확인
# 개발 프로세스[제품에 대한 생산] - 개발 생명주기[정의, 운영, 유지보수] - 프로세스 모형
# 프로세스 모형 종류 : 폭포수 모형, 나선형 모형, 프로토타입 모형, 
* [메뉴얼, 활동 목적, 작업 내용, 산출물 메뉴얼] 작성

소프트웨어 개발 표준
- 소프트웨어 개발 표준의 개요
* 소프트웨어 개발 단계에서 수행하는 품질 관리에 사용되는 국제 표준을 의미
* 종류 : ISO/IEC 12207, CMMI, SPICE
- ISO/IEC 12207 : [SW개발, 운용, 유지보수] - 체계적 관리, 생명주기 표준 제공
* ISO(국제표준화기구)에서 만든 표준 소프트웨어 생명 주기 프로세스
* 기본 생명 주기 프로세스[획득, 공급, 개발, 운영, 유지보수], 지원 생명 주기 프로세스[품질 검증, 문서화, 형상관리], 조직 생명 주기 프로세서[관리, 기반구조, 훈련, 개선]로 구분
- CMMI(Capability Maturity Model Integration)
* CMMI(능력 성숙도 통합 모델)는 소프트웨어 개발 조직의 업무 능력 및 조직의 성숙도를 평가하는 모델
* CMMI의 소프트웨어 프로세스 성숙도[5단계]는 초기[작업자 능력], 관리[규칙화된 프로세스], 정의[표준화된 프로세스], 정량적 관리[예측 가능한 프로세스], 최적화[지속적 개선]로 구분
- SPICE(Software Process Improvement and Capability Determination) = ISO/IEC 15504
* SPICE(소프트웨어 처리 개선 및 능력 평가 기준)는 소프트웨어 프로세스를 평가 및 개선하는 국제 표준
* 프로세스 범주 5가지 : 고객-공급자[1], 공학[2], 지원[3], 관리[4], 조직 프로세스[5]
* SPICE의 프로세스 수행 능력 단계 : 불완전, 수행, 관리, 확립, 예측, 최적화

소프트웨어 개발 방법론 테일러링
- 소프트웨어 개발 방법론 테일러링의 개요
* 프로젝트 상황 및 특성이 맞도록 정의된 소프트웨어 개발 방법론의 절차, 사용기법 등을 수정 및 보완하는 작업
- 소프트웨어 개발 방법론 테일러링 고려사항
* 내부적 요건 : 목표 환경, 요구사항, 프로젝트 규모[비용, 인력, 기간 등이 차이 날 경우], 보유 기술[프로세스, 개발방법론, 산출물]
* 외부적 요건 : 법적 제약사항, 표준 품질 기준
- 소프트웨어 개발 방법론 테일러링 기법(4가지)
* 프로젝트 규모와 복잡도, 프로젝트 구성원, 팀내 방법론 지원, 자동화에 따른 테일러링 기법

소프트웨어 개발 프레임워크
- 소프트웨어 개발 프레임워크의 개요
* 여러 가지 기능들을 제공해주는 반제품 형태의 소프트웨어 시스템
- 스프링 프레임워크
* 자바 플랫폼을 위한 오픈 소스 경량형 애플리케이션 프레임워크
- 전자정부 프레임워크
* 우리나라의 공공부문 정보화 사업 시 필요한 기능 및 아키텍처를 제공하는 프레임워크
* 응용 소프트웨어의 표준화, 품질 및 재사용성의 향상이 목적
- 닷넷 프레임워크(.Net)
* Windows 프로그램의 개발 및 실행 환경을 제공하는 프레임워크
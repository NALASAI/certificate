데이터 타입
- 데이터 타입
* 변수에 저장될 데이터의 형식을 나타내는 것
* 데이터 타입의 유형 : 정수, 부동 소수점, 문자, 문자열, 불린(Boolean | True || False), 배열
- C/C++의 데이터 타입 크기 및 기억 범위
* 문자(char)[1Byte], 부호없는 문자형(unsigned char)[1Byte], 정수(short[2Byte], int[4Byte], long[4Byte], long long[8Byte])
* 부호없는 정수형, 실수(float[4Byte], double[8Byte], long double[8Byte])
- JAVA의 데이터 타입 크기 및 기억 범위
* 문자(char)[2Byte], 정수(byte[1Byte], short[2Byte], int[4Byte], long[8Byte]), 실수(float[4Byte], double[8Byte]), 논리(boolean)[True = 1Byte, False = 0Byte]

변수
- 변수의 개요
* 컴퓨터가 명령을 처리하는 도중 발생하는 값을 저장하기위한 공간으로, 변할 수 있는 값
- 변수명 작성 규칙
* 영문자, 숫자, _(under bar)를 사용, 첫 글자는 영문자나 _(under bar)로 시작
* 글자 수에 제한이 없다. 공백, 특수문자, 예약어를 사용할 수 없다. 문장 끝에 세미콜론(;)
- 기억 클래스
* 일시적 기억[자동 변수(Auto, 메모리에 스택 구조로 할당), 레지스터 변수(Register)], 영구적 기억[정적 변수(내부, static), 정적 변수(외부), 외부 변수(extem)]
- 변수의 선언
* 변수 선언 형식 : 자료형 변수명 = 값

연산자
- 산술 연산자
* 산술 계산에 사용되는 연산자 : +, -, *, /, %, ++, --
- 관계 연산자
* 두 수의 관계를 비교하여 참(True)또는 거짓(False)을 결과로 얻는 연산자 : ==, !=, >, >=, <, <=
- 비트 연산자
* 비트별(0, 1)로 연산하여 결과를 얻는 연산자 : &(AND), ^(XOR), |(OR), ~(NOT), <<(왼쪽 쉬프트), >>(오른쪽 쉬프트)
- 논리 연산자
* 두 개의 논리 값을 연산하여 참(true)또는 거짓(false)을 결과로 얻는 연산자 : !(NOT), &&(AND), ||(OR)
- 대입 연산자
* 연산 후 결과를 대입하는 연산식을 간략하게 입력할 수 있다.
* 산술, 관계, 비트, 논리 연산자에 모두 적용할 수 있다.
- 조건 연산자
* 조건에 따라 서로 다른 수식을 수행한다.
* 형식 : 조건 ? 수식 1[참] : 수식2[거짓]
- 기타 연산자
* sizeof(자료형의 크기), 자료형

제어문
- 제어문의 개념
* 프로그램의 순서를 변경할 때 사용하는 명령문
* 제어문의 종류 : if문, 다중 if문, switch문, goto문, 반복문
# 단순 if문 : 조건에 따라서 실행할 문장을 달리하는 제어문, 조건이 한 개일때 사용
# 다중 if문 : 조건이 여러개 일때 사용하는 제어문
# Switch문 : 조건에 따라 분기할 곳이 여러 곳일 경우 간단하게 처리할 수 있는 제어문
# Goto문 : 프로그램 수행 중 현재 위치에서 원하는 다른 문장으로 건너뛰어 수행을 계속하기 위해 사용하는 제어문

ex) switch문 결과
char cc;
int dd = 50;
switch(dd)
{
	case 50 : cc = 'x';
	case 30 : cc = 'y';
	default : cc = 'z';
}
print("%c", cc); 
이 문제는 각 case에서 break가 없으므로 다음문장으로 넘어가게 된다 x에서 y로, y에서 z로 값이 넘어가게 된다
따라서 정답은 cc = 'z'이다

반복문
- 반복문의 개요
* 일정한 횟수를 반복하는 명령문
* 반복문 : for, while, do~while 문
* For문 : 초기값, 최종값, 증가값을 지정하는 수식을 이용해 정해진 횟수를 반복하는 제어문
* While문 : 조건이 참인 동안 실행할 문장을 반복 수행하는 제어문
* Do~While문 : 조건이 참인 동안 정해진 문장을 반복 수행, 실행할 문장을 무조건 한번 실행한 다음 조건을 판단하여 탈출 여부를 결정
* Break, Continue : Switch문이나 반복문의 실행을 제어하기 위해 사용되는 예약어

do		| 무조건 1회 실행
{
	문장
} while

int a = 0, sum = 0;
do
{
	sum = sum+ a
	a++
} while(a < 5)

1번 실행후 a = 1
2번 실행후 a = 2
3번 실행후 a = 3
4번 실행후 a = 4
5번 실행후 a = 5 여기서 반복문 종료된다.

따라서 sum 은 = 1 + 2 + 3 + 4 + 5
답 15

배열과 문자열
- 배열의 개념
* 동일한 데이터 유형을 여러개 사용해야 할 경우 이를 손쉽게 처리하기 위해 여러개의 변수들을 조합해서 하나의 이름으로 정의해 사용하는 것
* 1차원 배열 : a[0], a[1], a[2] .....
* 2차원 배열 : 행과 열 | int a[0][0], int a[0][1]....
* 배열의 초기화
* 배열 형태의 문자열 변수

ex) C언어에서 ' int a[3][2] = {10, 11, 12, 13, 14, 15}'로 선언하였을 경우 a[1][1]의 값은?
1. 12
2. 13
3. 14
4. 15
	0	1
0	10	11
1	12	13
2	14	15

포인터 : 번지수
- 포인터와 포인터 변수
* 포인터는 변수의 주소를 말하며, C언어에서는 주소를 제어할 수 있는 기능을 제공한다.
# 변수의 주소를 알아낼 때는 변수 앞에 번지 연산자 &를 붙인다. ex) &a = a변수에 대한 주소, *b = 변수 b가 가리키고 있는 값	
ex)
int a = 50;
int *b;
b = &a;		b에는 a의 주소가 저장된다.
*b = *b + 20;	b가 가리키고있는 곳의 값에 20 을 더하라
b가 가리키는곳의 값 = a의 값
a = 70 = *b
print("%d, %d", a, *b); 의 출력은?
# 실행문에서 포인터 변수에 간접 연산자 *를 붙이면 해당 포인터 변수가 가리키는 곳의 값을 말한다
# 포인터 변수는 동적 변수이다
- 포인터 와 배열
* 배열을 포인터 변수에 저장한 후 포인터를 이용해 배열의 요소로 접근할 수 있다.
ex)
int a[5];
int *p;
for(i = 0; i < 5; i++)
	a[i] = i + 10;
p = a;
for(i = 0; i < 5; i++)
	printf("%d ", *(p+i));
출력값은?
p=a이므로 a배열의 값을 나타내라
0 ~ 4까지 배열을 나열
10 11 12 13 14

절차적 프로그래밍 언어
- 절차적 프로그래밍 언어의 개요
* 일련의 처리 절차를 정해진 문법에 따라 순서대로 기술해 나가는 언어
# 프로그램이 실행되는 절차를 중요시 한다.
# 데이터를 중심으로 프로시저를 구현
- 절차적 프로그래밍 언어의 장/단점
* 컴퓨터 처리 구조와 유사하여 실행 속도가 빠르다
* 모듈 구성이 용이하며, 구조적인 프로그래밍이 가능하다
* 단점 : 프로그램에 대한 분석이 어렵다, 유지보수가 어렵다, 코드수정 어렵다
- 절차적 프로그래밍 언어의 종류
* C(이식성 좋다), ALGOL, COBOL, FORTRAN

객체지향 프로그래밍 언어
- 객체지향 프로그래밍 언어의 개요
* 소프트웨어를 개발할 때 객체들을 조립해서 프로그램을 작성
- 객체지향 프로그래밍 언어의 장/단점
* 시스템의 확장이 용이하다. 코드의 재활용성이 높다
* 사용자와 개발자 사이의 이해를 쉽도록 해준다.
* 유지보수가 용이하다
* 단점 : 처리 시간이 지연된다.
- 객체지향 프로그래밍 언어의 종류
* JAVA, C++, Smalltalk
- 객체지향 프로그래밍 언어의 구성 요소
* 객체(Object)[데이터(속성), 연산(메소드)] : 클래스(Class)[유사한 객체 묶음] : 메시지(Message)[메소드 일으키는 것, 객체들 간 상호작용하기 위한 수단]
- 객체지향 프로그래밍 언어의 특징
* 캡슐화(데이터와 함수를 하나로 묶는 것)
* 정보 은닉(다른 객체에게 자신의 정보를 숨기고 자신의 연산만을 통하여 접근하는 것)
* 추상화(불필요한 부분을 생략하고, 객체 속성 중 가장 중요한 것에만 중점을 두어 모델화하는 것)
* 상속성(부모 클래스로부터 속성과 연산을 하위 클래스가 물려 받는 것)
* 다형성(고유한 방법으로 응답할 수 있는 능력)

스크립트 언어
- 스크립트 언어(Script Language)의 개요
* HTML 문서 안에 직접 프로그래밍 언어를 삽입하여 사용하는 것
# 서버용 : (ASP, JSP, PHP, 파이썬), 클라이언트용 : (Java Script)
- 스크립트 언어의 장/단점
* 장점 : 배우고 코딩하기 쉽다, 개발 시간이 짧다, 쉽고 빠르게 수정할 수 있다.
* 단점 : 실행 속도는 느리다
- 스크립트 언어의 종류
* 자바 스크립트, [ASP, JSP, PHP]서버용언어, 파이썬(인터프리터언어)

선언형 언어
- 선언형 언어
* 명령형 언어와 반대되는 개념의 언어로, 프로그램이 수행해야 할 문제를 기술
# 주어진 문제를 해결하기위한 방법 기술, 목표를 명시한다 => 알고리즘은 명시하지 않는다
* 함수형 언어 : 수학적 함수를 조합하여 문제를 해결하는 언어, LISP(적용형 언어, 재귀호출 이용, 병렬처리에 유리)
* 논리형 언어 : 기호 논리학에 기반을 둔 언어, PROLOG(선언형 언어, 비절차적 언어, 반복문과 선택문을 사용하지 않는다)
- 선언형 언어의 장/단점
* 가독성이나 재사용성이 좋다
- 선언형 언어 종류
* HTML, LISP(인공지능), PROLOG(논리학 기초 고급언어), XML(HTML 단점 보안), Haskell

라이브러리
- 라이브러리의 개념
* 프로그램을 효율적으로 개발할 수 있도록 자주 사용하는 함수나 데이터들을 미리 만들어 모아놓은 집합체
- C언어의 대표적인 표준 라이브러리
* 헤더 파일 : Stdio.h[printf, scanf] | Math.h[수학함수] | String.h[문자열 처리] | Stdlib.h[자료형 변환] | Time.h[시간] | 
- JAVA의 대표적인 표준 라이브러리
* import문을 선언한 후 사용 | import java.util
* java.lang[자료형, 예외처리] | java.util[날짜처리] | java.io[입/출력] | java.net[네트워크] | java.awt[UI]

데이터 입/출력
- C언어의 표준 입/출력 함수의 개요
* 종류 : scanf(), getchar()[1개 문자 입력], gets()[문자열 입력], printf(), putchar()[1개 문자 표시], puts()[문자열 표시]
- scanf() 함수
* 형식 : scanf(서식 문자열, 변수의 주소)
# %d[정수], %u[부호없는 정수], %o[8진수], %x[16진수], %c[문자], %s[문자열], %f[실수], %e[지수], %ld[long 10진수], %lo[long 8진수], %lx[long 16진수], %p[주소 16진수]
- printf() 함수
* 형식 : printf(서식 문자열, 변수) 제어문자 : \n, \b, \t, \r 등
- 기타 표준 입/출력 함수
* getchar(), gets(), putchar(), puts()

예외 처리
- 예외 처리의 개요
* 예외가 발생했을때를 대비해 작성해 놓은 처리 루틱은 수행하도록 하는 것
- JAVA의 예외 처리 : try-catch문을 이용하여 예외처리 
* 예외를 객체로 취급하며, 예외와 관련된 클래스를 java.lang 패키지에서 제공한다.
- 프로토타입(Prototype)의 개념
* 컴파일러에게 사용될 함수에 대한 정보를 미리 알리는 것
- C언어에서의 프로토타입 선언
* main() 함수 바깥쪽에서 선언
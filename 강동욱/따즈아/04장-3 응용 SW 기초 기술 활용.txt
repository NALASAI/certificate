운영체제의 개념
- 운영체제(OS : Operation System)의 정의
* 시스템의 자원을 효율적으로 관리, 편리하고 효과적으로 사용할 수 있도록 환경을 제공
* 하드웨어와 소프트웨어 사이에 존재하며, 다른 응용 프로그램들이 유용한 작업을 할 수 있도록 환경을 제공
- 운영체제의 목적
* 처리 능력 향상[주어진 시간내 시스템 처리양], 반환 시간 단축[명령 후 완료까지 시간], 사용 가능도 향상[즉시 사용], 신뢰도 향상[정확성]
- 운영체제의 기능 : 자원의 스케줄링, 사용자-시스템 간 인터페이스 제공
* 프로세서, 기억장치, 입/출력 장치, 파일 및 정보 등의 자원을 관리
- 운영체제의 주요 자원 관리
* 프로세스 관리, 기억장치 관리, 주변장치 관리, 파일 관리
- 운영체제의 종류
* Windows, UNIX, LINUX, MacOs, MS-DOS

Windows
- Windows의 개요
* 그래픽 사용자 인터페이스(GUI : Graphic User Interface)
* 선점형 멀티캐스킹(Preemptive Multi-Tesking) : 강제종료 가능, 동시에 여러개의 프로그램 실행 가능
* PnP(Plug and Play, 자동 감지 기능)
* OLE(Object Linking and Embedding)
* 255자의 긴 파일명
* Single-User 시스템
# 멀티 프로그래밍 :  , 멀티 프로세싱 : 여러개의 CPU가 여러개의 프로그램을 처리하는것

UNIX / LINUX / MacOS
- UNIX의 개요 및 특징
* 대화식 운영체제, 이식성이 높다
* 다중 사용자(Multi-User), 다중 작업(Multi-Tasking)을 지원한다.
* 트리 구조의 파일 시스템을 갖는다.
* 시분할 시스템 지원하기 위해 설계된 운영체제
- UNIX 시스템의 구성
* 커널(Kernel) : UNIX의 가장 핵심적인 부분 - 관리[프로세스, 기억장치, 파일, 입출력, 통신, 정손변환] 및 제어역할
# 유닉스의 핵심 부분, 주기억장치에 적재 후 컴퓨터 종료까지 계속해서 상주
* 쉘(Shell) : 사용자의 명령어를 인식하여 프로그램을 호출하고 명령을 수행하는 명령어 해석기
- LINUX : UNIX의 축소판, 소스무료공개
- MacOS : 애플사 UNIX 기반 개발

기억장치의 관리의 개요
- 기억장치 계층 구조의 특징
* 기억장치는 레지스터[CPU 내부 존재, 속도가 가장 빠름], 캐시 기억장치, 주기억장치, 보조기억장치 계층 구조로 분류
- 기억장치의 관리 전략의 개요
* 한정된 주기억장치의 공간을 효율적으로 사용
* 반입전략, 배치전략, 교체 전략
- 반입(Fetch)전략
* 언제 주기억장치로 적재할 것인지 결정(요구 반입, 예상 반입)
- 배치(Placement)전략
* 주기억장치의 어디에 위치시킬 것인지를 결정
* 최초 적합(First Fit)[처음 만나는 저장공간에 배치], 최적 적합(Best Fit)[데이터의 크기와 저장공간의 크기가 가장 비슷한 곳에 배치], 최악 적합(Worst Fit)[저장공간의 크기에서 데이터의 크기를 뺏을때 가장 많이 남아있는 공간이 있는곳에 배치]
- 교체(Replacement)전략
* 어느 영역을 교체하여 사용할 것인지를 결정하는 전략
* FIFO, LRU, LFU 등
#LRU : 가장 오랫동안 참조하지 않은 페이지 교체
#LFU : 참조된 횟수가 가장 적은 페이지 교체

주기억장치 할당 기법
- 주기억장치 할당의 개념
* 연속 할당 기법 : 연속으로 할당하는 기법, 단일 분할 할당 기법, 다중 분할 할당 기법
* 분산 할당 기법 : 분산하여 할당하는 기법, 페이징 기법, 세그먼테이션 기법
- 단일 분할 할당 기법 : 1인의 사용자가 주기억장치를 사용하는 것
* 오버레이 기법 : 주기억장치보다 큰 사용자 프로그램을 실행하기 위한 기법
* 스와핑 기법 : 필요에 따라 다른프로그램과 교체하는 기법
- 다중 분할 할당 기법
* 고정 분할 할당 기법(정적 할당 기법) : 고정된 크기로 분할
# 프로그램 전체가 주기억장치에 위치해야 한다.
# 내부 단편화 : 프로그램이 저장공간에 들어가고 남아있는 공간
# 외부 단편화 : 프로그램이 저장공간에 들어가지 못하고 남아있는 공간
* 가변 분할 할당 기법(동적 할당 기법) : 필요한 만큼의 크기로 영역을 분할하는 기법

가상기억장치 구현 기법 / 페이지 교체 알고리즘
- 가상기억장치의 개요
* 보조기억장치(하드디스크)의 일부를 주기억장치처럼 사용하는 것
# 주기억장치의 용량보다 큰 프로그램을 실행
# 주기억장치의 이용률과 다중 프로그래밍의 효율을 높일 수 있다.
# 주소변환 과정 필요
- 페이징(Paging) 기법
* 프로그램(페이지)을 동일하게 나눠진 주기억장치의 영역(페이지 프레임)에 적재
* 외부단편화 발생안함, 내부단편화 발생
- 세그먼테이션(Segmentation) 기법
* 프로그램을 다양한 크기의 논리적인 단위로 나눈 후 주기억장치에 적재시켜 실행
* 외부단편화 발생, 내부단편화 발생안함
- 페이지 교체 알고리즘
* 페이지 프레임을 선택하여 교체할 것인지를 결정하는 기법
* OTP(최적 교체) : 앞으로 오랫동안 사용하지 않을 페이지 교체
* FIFO(First In First Out) : 가장 먼저 들어온 페이지 교체
* LRU(Least Recently Used) : 가장 오랫동안 사용하지 않은 페이지 교체
* LFU(Least Frequently Used) : 빈도가 가장 적은 페이지 교체
* NUR(Not Used Recently) : 참조비트, 변형비트 나열 후 순서 결정
* SCR(Second Chance Replacement, 2차 기회 교체)
# FIFO 단점 보안

가상기억장치 기타 관리 사항
- 페이지 크기
* 작을 경우 : 페이지 맵 테이블의 크기가 커지고, 매핑 속도가 늦어진다.
# 장점 : 페이지 단편화 감소, 기억장치 효율 좋음
# 단점 : 디스크에 접근횟수가 증가, 입/출력시간 증가
* 클 경우 : 페이지 맵 테이블의 크기가 작아지고, 매핑 속도가 빨라진다.
# 장점 : 입/출력 시간 감소
# 단점 : 페이지 단편화 증가, 주기억장치까지 이동시간 증가
- Locality(국부성, 지역성, 구역성, 국소성)
* 주기억장치를 참조할 때 일부 페이지만 집중적으로 참조
# 지역성 : 시간지역성[가까운 시간내 재참조], 공간지역성[하나의 데이터를 참조할때 근처의 데이터들도 참조, 배열, 순회]
- 워킹 셋(Working Set) : [지역성을 이용하여 주기억장치에 상주, 시간에 따라 변함]
* 프로세스가 일정 시간 동안 자주 참조하는 페이지들의 집합
- 프리페이징(Prepaging) : 필요할 것 같은 모든 페이지를 한꺼번에 페이지 프레임에 적재하는 기법
- 스래싱(Thrashing) : 프로세스의 처리 시간보다 페이지 교체에 소요되는 시간이 더 많아지는 현상
* 다중프로그래밍에 대한 정도가 높아지게 되면 스래싱 현상이 발생하기 쉬워진다. -- 적정 수준 유지, 부족한 자원 증설, 해당 프로세스 중단

프로세스의 개요
- 프로세스(Process)의 정의 : 현재 실행중인 프로그램
* PCB를 가진 프로그램, OS관리 실행단위, (비동기적[비규칙적, 비연속적] 행위 주체 => 독립적 실행)
- PCB(Process Control Block, 프로세스 제어 블록)
* 운영체제가 프로세스에 대한 중요한 정보를 저장해 놓은 곳
* 프로세스의 현 상태 저장, 포인터(부모, 자식)
* 프로세스 고유 식별자, 스케줄링, 프로세스에 대한 우선순위
* PC(프로그램 카운터 : 다음에 실행할 명령어를 저장하는것)정보
- 프로세스 상태 전이
* 프로세스가 시스템 내에 존재하는 동안 프로세스의 상태가 변하는 것
* 프로세스 상태 : 제출(Submit), 접수(Hold), 준비(Ready), 실행(Run), 대기(Wait), 종료(Terminated, Exit)
# 순서 : 제출 --> 접수 --> 준비 - DisPatch -> 실행 --> 종료
			^ <-TimeOut-
		        Wake Up-  대기   <I/O-
- 스레드(Thread)
* 프로세스 내에서의 작업 단위로서 시스템의 여러 자원을 할당받아 실행하는 프로그램의 단위
* 단일 스레드 : 스레드에 존재[힙, 정적, 코드, 레지스터, 스택]
* 다중 스레드 : 스레드마다 공유 영역(힙, 정적, 코드), 고유영역(레지스터, 스택)
# 사용자수준 : 사용자가 만든 라이브러리 사용 및 운영
# 커널 수준 : OS 커널 사용 및 운영 
* 병행성 증진, 처리율 증가

스케줄링
- 스케줄링(Scheduling)의 개요
* 필요한 시스템의 여러 자원을 해당 프로세스에게 할당하는 작업
- 스케줄링의 목적
* 처리율(량) 증가, CPU이용률 증가, 응답시간(Response Time, 반응 시간) 최소화
* 반환 시간(Turn Around Time)최소화, 대기시간 최소화
- 프로세스 스케줄링의 기법
* 비선점(Non-Preemptive)스케줄링 : 해당 프로세스가 완료될 때까지 CPU를 사용
# 종류 : FCFS, SJF, 우선순위, HRN, 기한부 등
* 섬점(Preemptive)스케줄링 : 우선순위가 높은 다른 프로세스가 CPU를 강제로 빼앗아 사용
# 종류 : Round Robin, SRT, 선점 우선순위, 다단계 큐, 다단계 피드백 큐 등

FCFS(First-Come, First-Served)
실행시간 [P1 = 20, P2 = 7, P3 = 3] 일때
처리순서는 먼저 들어온 순서대로 P1, P2, P3이다
평균 실행시간 = 20 + 7 + 3 / 3 = 10
반환시간 = [P1 = 20, P2 = 27, P3 = 30]
평균 반환시간 = 20 + (20+7) + (27+30)/3 = 77/3 = 25.7
대기시간 = [P1 = 0, P2 = 20, P3 = 27]
평균 대기시간 = 0 + 20 + 27 / 3 = 47 / 3 = (약)15.7

SJF(Shortest Job First)
실행시간 [P1 = 20, P2 = 7, P3 = 3]
처리순서는 실행시간이 가장 빠른 순서대로 P3, P2, P1이다
반환시간 [P1 = 30, P2 = 10, P3 = 3]
평균 반환시간 = 30 + 10 + 3 / 3 = 43 / 3 = 14.3
대기시간 [P1 = 10, P2 = 3, P3 = 0]
평균 대기시간 = 10 + 3 + 0 / 3 = 13 / 3 = 4.3

HRN : (대기시간 + 서비스시간) / 서비스시간 = 값(큰값을 우선순위)

서비스시간 : P1 = 20, P2 = 7, P3 = 3
대기시간 : P1 = 15, P2 = 20, P3 = 5

P1 = 20+15/20 = 1.75
P2 = 20+7/7 = 3.9
P3 = 5+3/3 = 2.7
따라서 P2 > P3 > P1 순서로 진행된다.

환경변수
- 환경변수의 개요
* 시스템 소프트웨어(운영체제)의 동작에 영향을 미치는 동적인 값들의 모임
# 변수명과 값으로 구성, 시스템의 기본 정보를 저장, 자식 프로세스에 상속
# 시스템 변수와 사용자 환경 변수로 구분
- Windows의 주요 환경 변수
* 환경 변수를 명령어나 스크립트에서 사용하려면 변수명 앞뒤에 '%'를 입력
ex) %path% : 실행 파일 경로, % system DRIVE % : 부팅된 드라이브
- UNIX / LINUX의 주요 환경 변수
* 환경 변수를 명령어나 스크립트에서 사용하려면 변수명 앞에 '$'를 입력

운영체제 기본 명령어
- 운영체제 기본 명령어의 개요
* CLI(Command Line Interface) : 키보드로 명령어를 직접 입력하여 작업을 수행
* GUI(Graphic User Interface) : 마우스로 아이콘이나 메뉴를 선택하여 작업을 수행
- Windows 기본 명령어
* CLI 기본 명령어 : DIR(목록), COPY(복사), TYPE(파일내용), CD(디렉토리 위치 변경), CHKDSK(디스크 상태 확인), FORMAT(초기화) 등
* GUI 기본 명령어 : 더블클릭
- UNIX / LINUX 기본 명령어
* CLI 기본 명령어 : cat(파일 내용), chdir(현재 디렉토리 위치 변경), chmod(파일 사용허가), fork(새로운 프로세스 생성), ls(파일 목록), mount(마운팅 - 연결한다, 새로운 파일시스템을 기존 파일시스템에 연결하는것), rm(파일 삭제), wait(기다리다) 등
* GUI 기본 명령어

인터넷
- 인터넷(Internet)의 개요
* TCP/IP 프로토콜을 기반으로 하여 전 세계 수많은 컴퓨터와 네트워크들이 연결된 광범위한 컴퓨터 통신망
ex) 192.163.5.7 IPv4 --DNS필요-- www.naver.com
- IP주소(Internet Protocol Address)
* 인터넷에 연결된 모든 컴퓨터 자원을 구분하기 위한 고유한 주소
# A Class : 16,777,216개의 호스트 사용 (2[24승]-2 개의 컴퓨터에 연결 가능) 서브넷 마스크 : 255.0.0.0
# B Class : 65,536개의 호스트 사용 (2[16승]-2 개의 컴퓨터에 연결 가능) 서브넷 마스크 : 255.255.0.0
# C Class : 256개의 호스트 사용 (2[8승]-2 개의 컴퓨터에 연결 가능) 서브넷 마스크 : 255.255.255.0
# 0의 위치에 컴퓨터가 연결할 수 있는 컴퓨터의 대수가 나타난다(숫자 하나당 8비트이다.)

사설 주소 => 인터넷 -> 사설
A 10.0.0.0 ~ 10.255.255.255
B 172.16.0.0 ~ 172.31.255.255
C 192.160.0.0 ~ 192.168.255.255

# D Class : 멀티캐스트용
# E Class : 실험적 주소이며 공용되지 않음

- 서브네팅(Subnetting)
* 할당된 네트워크 주소를 다시 여러 개의 작은 네트워크로 나누어 사용하는 것
* 서브넷 마스크(Subnet Mask) : 네트워크 주소와 호스트 주소를 구분하기 위한 비트
- IPv6(Internet Protocol version 6)의 개요
* IPv4의 주소 부족 문제를 해결하기위해 개발, 128비트의 긴 주소를 사용
- IPv6의 구성
* 유니캐스트(Unicast)[1:1 통신], 멀티캐스트(Multicast)[1:다 통신], 애니캐스트(Anycast)[가까운 라우터]
- 도메인 네임(Domain name)
* 숫자로 된 IP주소를 사람이 이해하기 쉬운 문자 형태로 표현한 것
* DNS(Domain Name System) : 도메인 네임을 IP주소로 변환하는 역할을 하는 시스템

OSI 참조 모델
- OSI(Open System Interconnection)참조 모델의 개요
* 다른 시스템 간의 원할한 통신을 위해 ISO(국제표준화기구)에서 제안한 통신 규약
# 하위 계층 : 물리계층 -> 데이터링크계층 -> 네트워크 계층
# 상위 계층 : 전송계층 -> 세션계층 -> 표현계층 -> 응용계층
- OSI 참조 모델의 목적
* 서로 다른 시스템 간을 상호 접속하기 위한 개념을 규정
- OSI 참조 모델에서의 데이터 단위
* 프로토콜 데이터 단위(PDU) : 동일 계층 간에 교환되는 정보의 단위
* 서비스 데이터 단위(SDU) : 상/하위 계층끼리 주고받는 정보의 단위
- 물리 계층(Physical Layer) : 랜 구축
* 장비 : 허브, 리피터 | 처리단위 : bit(비트)
* 기계적, 전기적, 기능적, 절차적 특성에 대한 규칙을 정의
- 데이터링크 계층(Data Link Layer) : 인접노드 간 신뢰성있는 전송 담당
* 장비 : 브릿지 | 처리단위 : Frame(프레임)
* 두개의 인접한 개방 시스템들 간에 신뢰성 있고 효율적인 정보 전송을 할 수 있도록 함
* 흐름 제어 기능, 프레임의 동기화 기능, 오류 제어 기능
- 네트워크 계층(Network Layer)
* 장비 : 라우터(최단 경로 설정) | 처리단위 : Packet(패킷)
* 개방 시스템들 간의 네트워크 연결을 관리하는 기능과 데이터의 교환 및 중계 가능
* 경로 설정(Routing)[최단경로설정], 데이터 교환 및 중계, 트래픽 제어, 패킷 정보 전송
- 전송 계층(Transport Layer)
* 처리단위 : Segment(세그먼트)
* 종단 시스템(End-to-End)간에 투명한 데이터 전송
* 오류 제어, 흐름 제어
- 세션 계층(Session Layer)
* 처리단위 : Message(메시지)
* 대화 제어 담당, 논리적 연결
- 표현 계층(Presentation Layer) : 암호화, 압축, 코드변환 
* 처리단위 : Message(메시지)
* 코드 변환, 데이터 암호화, 데이터 압축, 구문 검색, 정보 형식(포맷) 변환, 문맥 관리 기능
- 응용 계층(Application Layer) : Email서비스
* 처리단위 : Message(메시지)
* 사용자(응용 프로그램)가 OSI 환경에 접근할 수 있도록 서비스를 제공

네트워크 관련 장비
- 네트워크 인터페이스 카드(NIC : Network Interface Card)
* 컴퓨터와 컴퓨터 또는 컴퓨터와 네트워크를 연결하는 장치
- 허브(Hub) : 가까운 거리의 컴퓨터들을 연결하는 장치
- 리피터(Repeater) : 약해질 경우 원래의 신호 형태로 재생하여 다시 전송하는 역할을 수행
- 브리지(Bridge) : LAN과 LAN[동일한 네트워크 연결]을 연결하거나 LAN안에서의 컴퓨터 그룹(세그먼트)을 연결하는 기능
- 스위치(Switch) : LAN과 LAN을 연결하여 훨씬 더 큰 LAN을 만드는 장치(속도의 변화가 없다)
- 라우터(Router) : 데이터 전송의 최적 경로를 선택할 수 있는 기능
- 게이트웨이(GateWay)[통로, 관문] : 서로 다른 네트워크 연결
* 전 계층(1~7계층)의 프로토콜 구조가 다른 네트워크의 연결을 수행

프로토콜의 개념
- 프로토콜(Protocol)의 정의
* 서로 다른 기기들 간의 데이터 교환을 원할하게 수행할 수 있도록 표준화시켜 놓은 통신 규약
- 프로토콜의 기본 요소
* 구문(Syntax) : 데이터 형식, 부호화, 신호레벨 등을 규정하는 것
* 의미(Semantics) : 협조사항 규정
* 시간(Timing) : 속도, 순서제어 규정
- 프로토콜의 기능
* 단편화와 재결합, 캡슐화(제어 정보도 같이 보냄), 흐름 제어(전송량 조절), 오류 제어, 동기화, 순서 제어, 주소 지정, 다중화, 경로 제어, 전송 서비스

TCP/IP
- TCP : 신뢰성있는 전송, 연결형 | IP : 비신뢰성 전송, 비연결형
- TCP/IP의 개요(Transmission Control Protocol / Internet Protocol)
* 인터넷에 연결된 서로 다른 기종의 컴퓨터들이 데이터를 주고받을 수 있도록 하는 표준 프로토콜
- TCP/IP의 구조
* 응용 계층, 전송 계층, 인터넷 계층, 네트워크 액세스 계층으로 이루어져 있다.
- 응용 계층의 주요 프로토콜
* FTP(File Transfer Protocol) : 파일 송수신
* SMTP(Simple Mail Transfer Protocol) : 전자우편
* TELNET
* SNMP(Simple Network Management Protocol) : TCP/IP 관리
* DNS(Domain Name System) : [도메인주소 -> IP주소] 변환
* HTTP(Hyper Text Transfer Protocol) : 웹서비스
- 전송계층의 주요 프로토콜
* TCP(Transmission Control Protocol) : 스트림 위주의 전달(패킷 단위)
* UDP(User Datagram Protocol) : 비신뢰성, 비연결형
* RTCP(Real-Time Control Protocol) : 주기적 제어정보 전송, 32비트경계
- 인터넷 계층의 주요 프로토콜
* IP(Internet Protocol) : 
* ICMP(Internet Control Massage Protocol) | IGMP : 멀티캐스트 지원
* ARP(Address Resolution Protocol) : IP주소를 Mac주소로 변경
* RARP(REVERSE Address Resolution Protocol) : 
- 네트워크 액세스 계층의 주요 프로토콜 : 이더넷, IEEE 802, HDLC, X25, RS232C



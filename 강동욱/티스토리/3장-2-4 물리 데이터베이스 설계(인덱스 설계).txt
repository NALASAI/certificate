인덱스 (Index)의 개념
- 인덱스는 레코드를 빠르게 접근하기 위해 (키 값, 포인터) 쌍으로 구성되는 데이터 구조
- 인덱스는 데이터가 저장된 물리적 구조와 밀접한 관계
- 인덱스가 없으면 특정한 값을 찾기 위해 모든 데이터를 확인하는 TABLE SCAN 발생
- 기본 인덱스 : 기본키를 위한 인덱스
- 보조 인덱스 : 기본 인덱스가 아닌 인덱스들
- 클러스터드 인덱스 (Clustered Index)
* 레코드 물리적 순서가 인덱스의 엔트리 순서와 일치하게 유지되도록 구성하는 인덱스
* 데이터 삽입, 삭제 발생 시 순서를 유지하기 위해 데이터 재정렬
* 한 개의 릴레이션에 하나의 인덱스만 생성 가능

넌클러스터드 인덱스 (Non-Clustered Index)
* 인덱스 키 값만 정렬되어 있을 뿐 실제 데이터는 정렬되지 않는 방식
* 클러스터드 인덱스에 비해 다소 떨어지는 검색 속도
* 한 개의 릴레이션에 여러 개의 인덱스 생성 가능

트리 기반 인덱스
- 인덱스를 저장하는 블록들이 트리 구조를 이루고 있는 것
- B 트리 인덱스
* 루트 노드에서 하위 노드로 키 값의 크기를 비교해 나가면서 단말 노드에서 찾고자 하는 데이터 검색
* 모든 리프 노드는 같은 레벨에 있음

- B+ 트리 인덱스
* 단말 노드가 아닌 노드로 구성된 인덱스 세트와 단말 노드로만 구성된 순차 세트로 구분
* 인덱스 세트에 있는 노드들은 단말 노드에 있는 키 값을 찾아갈 수 있는 경로로만 제공
* 순차 세트에 있는 단말 노드가 해당 데이터 레코드의 주소를 가리킴

비트맵 인덱스
- 인덱스 컬럼의 데이터를 0 또는 1로 변환하여 인덱스키로 사용
- 목적 : 키 값을 포함하는 로우의 주소를 제공하는 것
- 데이터가 Bit로 구성되어 있기 때문에 저장 공간이 작고, 압축 효율이 좋음

함수 기반 인덱스
- 컬럼값 대신 컬럼에 특정 함수나 수식을 적용하여 산출된 값을 사용
- 데이터를 입력하거나 수정할 때 함수를 적용해야 하므로 부하 발생 가능

비트맵 조인 인덱스
- 다수의 조인된 객체로 구성된 인덱스

도메인 인덱스
- 개발자가 필요한 인덱스르 직접 만들어 사용하는 것

인덱스 설계
1) 인덱스의 대상 테이블이나 컬럼 선정
2) 인덱스의 효율성을 검토하여 인덱스 최적화 수행
3) 인덱스 정의서 작성
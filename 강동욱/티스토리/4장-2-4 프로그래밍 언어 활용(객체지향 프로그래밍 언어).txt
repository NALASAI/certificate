객체지향 프로그래밍 언어의 개요
- 현실 세계의 개체를 하나의 객체로 만들어, 객체들을 조립해서 프로그램을 작성할 수 있도록 한 프로그래밍 기법
- 프로시저보다는 명령과 데이터로 구성된 객체를 중심으로 하는 프로그래밍 기법

객체지향 프로그래밍 언어의 장단점
- 장점
* 상속을 통한 재사용과 시스템 확장이 용이
* 코드의 재활용성이 높고, 대형 프로그램 작성이 용이
* 유지 보수가 용이
- 단점
* 프로그래밍 구현을 지원해주는 정형화된 분석 및 설계 방법이 없음
* 구현 시 처리 시간 지연

객체지향 프로그래밍 언어의 구성 요소
- 객체 (Object)
* 속성과 이를 처리하기 위한 메소드를 결합시킨 실체
* 속성 (Attribute) : 한 클래스 내 속한 객체들이 갖고 있는 데이터 값
* 메소드 (Method) : 객체가 메시지를 받아 실행해야 할 때 구체적인 연산을 정의하는 것
- 클래스 (Class)
* 공통된 특성과 행위를 갖는 객체의 집합
- 메시지 (Message)
* 객체의 메소드를 일으키는 외부의 요구 사항

객체지향 프로그래밍 언어의 특징
- 캡슐화 (Encapsulation)
* 데이터와 함수를 하나로 묶는 것
* 캡슐화된 객체들은 재사용 용이
- 정보 은닉 (Information Hiding)
* 캡슐화에서 가장 중요한 개념
* 다른 객체에게 자신의 정보를 숨기고 자신의 연산만을 통하여 접근하는 것
- 추상화 (Abstraction)
* 불필요한 부분을 생략하고, 객체 속성 중 가장 중요한 것에만 중점을 두어 모델화하는 것
- 상속성 (Inheritance)
* 상위 클래스의 모든 속성과 연산을 하위 클래스가 물려받는 것
- 다형성 (Polymorphism)
* 하나의 메시지에 대해 각 객체가 갖고 있는 고유한 특성으로 응답할 수 있는 능력
* 객체들은 동인한 메소드명을 사용하며 같은 의미의 응답을 함
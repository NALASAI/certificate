공유 폴더 방식
- 공유 폴더 방식은 버전 관리 자료가 로컬 컴퓨터의 공유 폴더에 저장되어 관리
- 개발자들은 개발이 완료된 파일을 약속된 공유 폴더에 매일 복사
- 담당자는 파일을 자기 PC로 복사하여 이상 유무 확인
- 파일의 변경 사항을 데이터베이스에 기록
- ex) SCCS, RCS, PVCS 등

클라이언트/서버 방식
- 버전 관리 자료가 서버에 저장되어 관리되는 방식
- 서버 자료를 개발자별로 자신의 PC로 복사하여 작업
- 모든 버전 관리는 서버에서 수행
- ex) CVS, SVN, CVSNT 등

분산 저장소 방식
- 하나의 원격 저장소와 분산된 개발자 PC의 로컬 저장소에 함께 저장되어 관리
- 로컬에서 버전 관리가 가능하므로 원격 저장소에 문제가 생겨도 로컬 저장소 자료를 이용하여 작업
- ex) Git, GNU arch, Bazaar 등

Subversion (SVN)
- Subversion은 CVS를 개선한 것으로, 서버에는 최신 버전의 파일들과 변경 내역이 관리 (클라이언트/서버 방식)
- 모든 개발 작업은 trunk 디렉토리에서 수행되며, 추가 작업은 branches 디렉토리 안에 별도의 디렉토리를 만들어 작업 후 병합
- 커밋할 때마다 revision (커밋 버전) 1씩 증가
- 주요 명령어
* add / commit / update (=pull) / checkout (=push)
* import : 아무것도 없는 서버 저장소에 맨 처음 소스 파일을 저장하는 명령어 (한 번만 사용)
* export : 버전 관리 정보를 제외한 순수 소스 파일만을 서버에서 받아옴

Git
- 분산 버전 관리 시스템으로 2개의 저장소 (로컬/원격 저장소) 존재
* 로컬 저장소 : 개발자들이 실제 개발을 진행하는 장소
* 원격 저장소 : 협업을 위해 버전을 공동 관리하는 곳
- 로컬에서 버전 관리가 진행되기 때문에 신속하게 처리 가능
- 주요 명령어
* add / commit / push / pull / merge / fork
* branch : 새로운 브랜치 생성
* checkout : 지정한 브랜치로 이동
* init : 로컬 저장소 생성
* fetch : 원격 저장소의 변경 이력만을 로컬 저장소에 반영
* clone : 원격 저장소의 전체 내용을 로컬 저장소로 복제
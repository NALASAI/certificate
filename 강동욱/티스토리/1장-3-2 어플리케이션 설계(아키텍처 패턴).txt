아키텍처 패턴의 개요
- 아키텍처를 설계할 때 참조할 수 있는 전형적인 해결 방식
- 소프트웨어 시스템의 구조를 구성하기 위한 기본적인 윤곽 제시
- 아키텍처 패턴의 장점
* 시행착오를 줄여 개발 시간 단축
* 검증된 구조로 개발하기 때문에 안정적인 개발 가능
* 시스템의 특성을 개발 전에 예측하는 것이 가능
- 아키텍처 패턴의 종류
* 레이어 패턴, 클라이언트-서버 패턴, 파이프-필터 패턴, 모델-뷰-컨트롤러 패턴

레이어 패턴 (Layers Pattern)
* 시스템을 계층으로 구분하여 구성 (고전적인 방법)
* 상위 계층은 서비스 제공자가 되고, 하위 계층은 상위 계층의 클라이언트가 됨
* 서로 마주보는 두 계층 사이에서만 상호작용이 이루어지므로 변경 작업이 용이
* ex) OSI 참조 모델

클라이언트-서버 패턴 (Client-Sever Pattern)
* 서버 컴포넌트 : 클라이언트 컴포넌트 = 1 : N
* 사용자는 클라이언트와만 소통
* 서버는 클라이언트 요청에 대비해 항상 대기 상태 유지
* 클라이언트와 서버는 서로 독립적

파이프-필터 패턴 (Pipe-Filter Pattern)
* 데이터 스트림 절차의 각 단계를 필터 컴포넌트로 캡슐화하여 파이프를 통해 전송하는 패턴
* 필터 컴포넌트는 재사용성이 좋고 확장이 용이
* ex) UNIX shell

모델-뷰-컨트롤러 패턴 (Model-View-Controller Pattern)
* 각 부분은 별도의 컴포넌트로 분리되어 있어 서로 영향 받지 않고 개발 가능
* 모델 : 서브시스템의 핵심 기능과 데이터 보관
* 뷰 : 사용자에게 정보 표시
* 컨트롤러 : 사용자로부터 받은 입력 처리

기타 패턴
- 마스터-슬레이브 패턴 (Master-Slave Pattern)
* 마스터 컴포넌트는 모든 작업의 주체이고, 슬레이브 컴포넌트는 마스터 컴포넌트의 지시에 따라 작업 수행
- 브로커 패턴 (Broker Pattern)
* 사용자가 원하는 서비스를 요청하면 브로커 컴포넌트가 요청에 맞는 컴포넌트와 사용자를 연결
* 분산 환경 시스템에서 활용
- 피어-투-피어 패턴 (Peer-To-Peer Pattern)
* 각 피어는 클라이언트가 될 수도, 서버가 될 수도 있는 패턴
* 전형적인 멀티스레딩 방식 사용
- 이벤트-버스 패턴 (Event-Bus Pattern)
* 특정 채널에 이벤트 메시지를 발행하면 해당 채널을 구독한 리스너들이 이벤트를 처리하는 방식
- 블랙보드 패턴 (Blackboard Pattern)
* 모든 컴포넌트들이 공유 데이터 저장소와 블랙보드 컴포넌트에 접근 가능한 형태
- 인터프리터 패턴 (Interpreter Pattern)
* 프로그램 코드의 각 라인을 수행하는 방법을 지정
결함 (Fault)의 정의
- 소프트웨어 개발자가 설계한 것과 다르게 동작하거나 다른 결과가 발생되는 경우

결함 관리 프로세스
1) 결함 관리 계획 : 전체 프로세스에 대한 결함 관리 일정, 인력 등을 확보하여 계획 수립
2) 결함 기록 : 발견된 결함을 결함 관리 DB에 기록
3) 결함 검토 : 등록된 결함을 검토하고 수정할 개발자에게 전달
4) 결함 수정 : 전달받은 결함 수정
5) 결함 재확인 : 개발자가 수정한 내용을 확인하고 다시 테스트 부여
6) 결함 상태 추적 및 모니터링 활동
7) 최종 결함 분석 및 보고서 작성

결함 상태 추적
- 테스트에서 발견된 결함은 지속적으로 상태 변화를 추적하고 관리해야함

결함 추적 순서
1) 결함 등록 (Open) : 테스터와 QA 담당자에 의해 발견된 결함이 등록된 상태
2) 결함 검토 (Reviewed) : 등록된 결함이 검토된 상태
3) 결함 할당 (Assigned) : 결함을 수정하기 위해 개발자와 문제 해결 담당자에게 결함이 할당된 상태
4) 결함 수정 (Resolved) : 개발자가 결함 수정 완료한 상태
5) 결함 조치 보류 (Deferred) : 결함의 수정이 불가능해 연기된 상태
6) 결함 종료 (Closed) : 결함이 해결되어 종료를 승인한 상태
7) 결함 해제 (Clarified) : 종료 승인한 결함을 검토하여 결함이 아니라고 판명한 상태

결함 분류
- 시스템 결함 : 주로 애플리케이션 환경이나 데이터베이스 처리에서 발생된 결함
- 기능 결함 : 애플리케이션 기획, 설계 단계에서 유입된 결함
- GUI 결함 : 사용자 화면 설계에서 발생된 결함
- 문서 결함 : 의사소통 및 기록이 원할하지 않아 발생된 결함

결함 심각도
- 결함이 전체 시스템에 미치는 치명도를 나타내는 척도
* High : 더 이상 프로세스를 진행할 수 업도록 만드는 결함
* Medium : 시스템 흐름에 영향을 미치는 결함
* Low : 시스템 흐름에는 영향을 미치지 않는 결함

결함 우선순위
- 발견된 결함 처리에 대한 신속성을 나타내는 척도
- 결함의 심각도가 높으면 우선순위도 높지만 반드시 그런 것은 아님
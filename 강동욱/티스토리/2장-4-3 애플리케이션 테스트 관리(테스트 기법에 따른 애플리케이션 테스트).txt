화이트박스 테스트 (White Box Test)
- 모듈의 원시 코드를 오픈시킨 상태에서 원시 코드의 논리적인 모든 경로를 테스트하여 테스트 케이스 설계
- 설계된 절차에 초점을 둔 구조적 테스트로 테스트 과정 초기에 적용
- 원시 코드의 모든 문장을 한 번 이상 실행함으로써 수행

화이트박스 테스트의 종류
- 기초 경로 검사
* 대표적인 화이트박스 테스트 기법
* 절차적 설계의 논리적 복잡성을 측정할 수 있는 테스트 기법
- 제어 구조 검사
* 조건 검사 (Condition Testing) : 모듈 내에 있는 논리적 조건을 테스트
* 루프 검사 (Loop Testing) : 프로그램의 반복 구조에 초점을 맞춰 실시
* 데이터 흐름 검사 (Data Flow Testing) : 프로그램에서 변수 사용 위치에 초점을 맞춰 실시

화이트박스 테스트의 검증 기준
- 테스트 케이스들이 테스트에 얼마나 적정한지 판단하는 기준
* 문장 검증 기준 (Statement Coverage) : 모든 구문이 한 번 이상 수행되도록 설계
* 분기 검증 기준 (Branch Coverage) : 모든 조건문이 한 번 이상 수행되도록 설계
* 조건 검증 기준 (Condition Coverage) : 모든 조건문에 대해 True인 경우와 False인 경우가 한 번 이상 수행되도록 설계
* 분기/조건 기준 (Branch/Condition Coverage) : 모든 조건문과 각 조건문에 포함된 개별 조건식의 결과가 Trud/False 한 번 이상씩 수행되도록 설계
- 검증 기준 (Coverage) 종류
* 기능 기반 커버리지 : 실제 테스트가 수행된 기능 수 / 전체 기능 수
* 라인 커버리지 : 테스트 시나리오가 수행한 코드의 라인 수 / 전체 코드의 라인 수
* 코드 커버리지 : 소스 코드의 구조 코드 자체가 얼마나 테스트 되었는지 측정

블랙박스 테스트 (Black Box Test)
- 각 기능이 완전히 작동되는 것을 입증하는 테스트
- 요구사항 명세서를 보면서 테스트하는 것으로, 주로 구현된 기능을 테스트
- 부정확하거나 누락된 기능, 인터페이스 오류 등을 발견하기 위해 사용되며 테스트 과정의 후반부에 적용

블랙박스 테스트의 종류
- 동치 분할 검사 (Equivalence Partitioning Testing) : 입력 자료에 초점을 맞춰 검사 (= 동등 분할 기법)
- 경계값 분석 (Boundary Value Analysis) : 입력 조건의 중간값보다 경계값에서 오류 발생 확률이 높다는 점을 이용, 입력 조건의 경계값을 테스트 케이스로 선정
- 원인-효과 그래프 검사 (Cause-Effect Graphing Testing) : 입력 데이터 간의 관계와 출력에 영향을 미치는 상황을 분석하여 효용성이 높은 테스트 케이스 선정
- 오류 예측 검사 (Error Guessing) : 과거 경험이나 확인자의 감각으로 테스트
- 비교 검사 (Comparision Testing) : 여러 버전의 프로그램에 동일한 테스트 자료를 제공하여 동일한 결과가 출력되는지 테스트
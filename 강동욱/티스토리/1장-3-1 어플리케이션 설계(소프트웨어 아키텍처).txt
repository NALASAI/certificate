소프트웨어 아키텍처의 설계
- 소프트웨어 아키텍처는 소프트웨어를 구성하는 요소들 간의 관계를 표현하는 시스템 구조
- 이해 관계자들의 의사소통 도구로 활용

기본원리
- 모듈화 (Modularity)
* 소프트웨어 성능을 향상시키거나 유지 관리가 용이하도록 시스템의 기능들을 모듈 단위로 나누는 것
* 자주 사용되는 기능들을 공통 모듈로 구성하여 프로젝트의 재사용성 향상
- 추상화 (Abstraction)
* 문제의 포괄적인 개념을 설계한 후 차례로 세분화하여 구체화시켜 나가는 것
* 최소의 비용으로 실제 상황에 대처 가능
* 추상화의 유형
(1) 과정 추상화 : 전반적인 흐름만 파악0
(2) 데이터 추상화 : 데이터의 세부적인 용도를 정의하지 않고, 데이터 구조를 대표할 수 있는 표현으로 대체
(3) 제어 추상화 : 이벤트 발생의 절차나 방법을 정의하지 않고, 대표할 수 있는 표현으로 대체
- 단계적 분해 (Stepwise Refinement)
* 문제를 상위 중요 개념으로부터 하위 개념으로 구체화시키는 하향식 설계 전략
* 추상화의 반복에 의해 세분화
- 정보 은닉 (Information Hiding)
* 다른 모듈이 접근하거나 변경하지 못하도록 하는 기법
* 정보 은닉된 모듈과 커뮤니케이션할 필요가 있을 때는 필요한 정보만 인터페이스를 통해 주고받음
* 모듈 변경 시 다른 모듈에 영향을 주지 않으므로 유지보수가 용이

품질속성
- 시스템 측면
* 성능 : 사용자 요청 발생 시 빠르게 처리하는 것
* 보안 : 허용되지 않은 접근은 막고, 허용된 접근에는 적절한 서비스를 제공하는 것
* 가용성 : 장애 없이 정상적인 서비스를 제공하는 것
* 기능성 : 사용자가 요구한 기능을 구현하는 것
* 사용성 : 사용자가 소프트웨어를 잘 사용하도록 편리하게 구현하는 것
* 변경 용이성 : 소프트웨어가 다른 하드웨어나 플랫폼에서도 동작할 수 있도록 구현하는 것
* 확장성 : 시스템 용량이나 처리능력을 확장시켰을 때 이를 효과적으로 활용할 수 있도록 구현하는 것
- 비즈니스 측면
* 시장 적시성 : 정해진 시간에 맞춰 프로그램을 출시하는 것
* 비용과 혜택 : 개발 비용을 더 투자하여 유연한 아키텍처를 만들 것인지 결정하는 것
* 예상 시스템 수명 : 시스템을 얼마나 오랫동안 사용할 것인지를 고려하는 것
- 아키텍처 측면
* 개념적 무결성 : 전체 시스템과 시스템을 이루는 구성요소들 간의 일관성을 유지하는 것
* 정확성/완결성 : 요구사항을 모두 충족시키는 것
* 구축 가능성 : 모듈 단위로 구분된 시스템을 적절하게 배분하여 유연하게 일정을 변경할 수 있도록 하는 것

소프트웨어 아키텍처의 설계 과정
1. 설계 목표 설정 : 요구사항을 분석하여 전체 시스템의 설계 목표 설정
2. 시스템 타입 결정 : 시스템과 서브시스템 타입을 결정하고, 설계 목표와 함께 고려하여 아키텍처 패턴 선택
3. 아키텍처 패턴 적용 : 시스템의 표준 아키텍처 설계
4. 서브시스템 구체화 : 서브시스템 간 상호작용을 위한 동작과 인터페이스 정의
5. 검토
프로세스 (Process)의 정의
- 실행중인 프로그램 (= 작업, 태스크)
- PCB를 가진 프로그램
- 실기억장치에 저장된 프로그램
- 프로세서가 할당되는 실체
- 프로시저가 활동중인 것
- 비동기적 행위를 일으키는 주체

PCB (Process Control Block, 프로세스 제어 블록)
- PCB는 운영체제가 프로세스에 대한 중요한 정보를 저장해 놓는 곳 (= Task Control Block, Job Control Block)
- 각 프로세스가 생성될 때마다 고유의 PCB가 생성되고, 프로세스 완료 시 제거됨
- PCB에 저장되어 있는 정보
* 프로세스의 현재 상태 : 준비, 대기, 실행 등 프로세스 상태
* 포인터
1) 부모 프로세스에 대한 포인터
2) 자식 프로세스에 대한 포인터
3) 프로세스가 위치한 메모리에 대한 포인터 : 현재 프로세스가 위치한 주소 기억
4) 할당된 자원에 대한 포인터 : 프로세스에 할당된 각 자원에 대한 주소 기억
* 프로세스 고유 식별자
* 스케줄링 및 프로세스의 우선순위
* CPU 레지스터 정보
* 주기억장치 관리 정보
* 입출력 사앹 정보
* 계정 정보 : CPU 사용 시간, 한정된 시간

프로세스 상태 전이
- 프로세스가 시스템 내에 존재하는 동안 프로세스 상태가 변하는 것을 의미
					         Job스케줄러		Dispatch
	제출(Submit)---------------->접수(Hold)	->	준비(Ready)	->	실행(Run)		->	종료(Terminated Exit)
				       ^				^	<-------------	|
			     Spooling |  |			입,출력	|	선점, 시간초과	|
				     v			깨움	|(Wake Up)		|
				    번역				대기	<-------------------
										입,출력발생
- 제출 (Submit) : 작업을 처리하기 위해 사용자가 작업을 시스템에 제출한 상태
- 접수 (Hold) : 제출된 작업이 스풀 공간인 디스크 할당 위치에 저장된 상태
- 준비 (Ready)
* 프로세스가 프로세서를 할당받기 위해 기다리고 있는 상태
* 프로세스는 준비상태 큐에서 실행 준비
* 접수 상태에서 준비 상태로의 전이는 Job Scheduler에 의해 수행
- 실행 (Run)
* 준비상태 큐에 있는 프로세스가 프로세서를 할당받아 실행되는 상태
* 프로세스 수행이 완료되기 전에 Timer Run Out되면 프로세스는 준비 상태로 돌아감
* 실행중인 프로세스에 입출력 처리가 필요하면 대기 상태로 전이됨
* 준비 상태에서 실행 상태로의 전이는 CPU Scheduler에 의해 실행
- 대기 (Wait), 보류, 블록 (Block) : 프로세스에 입출력 처리가 필요하면 현재 실행 중인 프로세스가 중단되고, 처리가 완료될 때까지 대기하고 있는 상태
- 종료 (Terminated, Exit) : 프로세스 실행이 끝나고 프로세스 할당이 해제된 상태

프로세스 상태 전이 관련 용어
- Dispatch : 준비 상태에서 대기하고 있는 프로세스 중 하나가 프로세서를 할당받아 실행 상태로 전이되는 과정
- Wake Up : 입출력 작업이 완료되어 프로세스가 대기 상태에서 준비 상태로 전이되는 과정
- Spooling : 상대적으로 느린 입출력장치의 처리 속도를 보완하기 위해 입출력할 데이터를 나중에 한꺼번에 처리하기 위해 디스크에 저장하는 과정
- 교통량 제어기 (Traffic Controller) : 프로세스 상태에 대한 조사와 통보 담당

스레드 (Thread)
- 프로세스 내에서의 작업 단위로서 시스템의 여러 자원을 할당받아 실행하는 프로그램의 단위
- 단일 스레드 : 하나의 프로세스에 하나의 스레드가 존재하는 경우
- 다중 스레드 : 하나의 프로세스에 하나 이상의 스레드가 존재하는 경우
- 스레드 기반 시스템에서 스레드는 독립적인 스케줄링의 최소 단위로서 프로세스 역할을 담당
- 스레드 분류
* 사용자 수준의 스레드
1) 사용자가 만든 라이브러리를 사용하여 스레드 운용
2) 속도는 빠르지만 구현이 어려움
* 커널 수준의 스레드
1) 운영체제의 커널에 의해 스레드 운용
2) 구현이 쉽지만 속도가 느림
- 스레드 사용의 장점
* 하나의 프로세스를 여러 개의 스레드로 생성하여 병행성 증진
* 처리율 향상, 응답 시간 단축
* 프로세스들 간의 통신 향상
* 실행 환경을 공유시켜 기억장소의 낭비가 줄어듬
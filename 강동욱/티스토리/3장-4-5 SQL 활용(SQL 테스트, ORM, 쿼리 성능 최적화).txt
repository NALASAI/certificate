SQL 테스트의 개요
- SQL이 작성 의도에 맞게 원하는 기능을 수행하는지 검증하는 과정

단문 SQL 테스트
- DDL, DML, DCL이 포함되어 있는 SQL과 TCL (Transaction Control Language)을 테스트하는 것으로, 직접 실행
- DESCRIBE 명령어를 이용하여 DDL로 작성된 테이블이나 뷰의 속성 확인 가능

절차형 SQL 테스트
- 프로시저, 사용자 정의 함수, 트리거 등의 절차형 SQL은 디버깅을 통해 테스트
- SHOW 명령어를 통해 오류 확인

ORM(Object Relational Mapping)
ORM의 개요
- ORM은 객체지향 프로그래밍의 객체와 관계형 데이터베이스의 데이터를 매핑하는 기술
- ORM으로 생성된 가상의 객체지향 데이터베이스는 프래그래밍 코드와 독립적이므로 재사용 및 유지보수가 용이

ORM 프레임워크
- JAVA : JPA, Hibernate, EclipseLink 등
- C++ : ODB, QxOrm 등
- Python : Django, SQLAlchemy 등
- iOS : DatabaseObjects, Core Data 등
- .NET : NHibernate, Dapper 등
- PHP : Doctrine, Propel, RedBean 등

ORM의 한계
- 프레임워크가 자동으로 SQL을 작성하기 때문에 의도대로 SQL이 작성되었는지 확인할 필요가 있음
- 객체지향적인 사용을 고려해야 하고, 프로젝트가 크고 복잡해질수록 ORM 기술 적용이 어려움

쿼리 성능 최적화
쿼리 성능 최적화의 개요
- 데이터 입출력 애플리케이션의 성능 향상을 위해 SQL 코드를 최적화하는 것
- 최적화 전 성능 측정 도구인 APM을 사용하여 최적화 할 쿼리 선정
- 최적화 할 쿼리에 대해 옵티마이저가 수립한 실행 계획 검토
- 옵티마이저
* RBO (Rule Based Optimizer, 규칙 기반 옵티마이저)
# 규칙에 정의된 우선순위를 기준으로 최적화
# 성능 기준 : 개발자의 SQL 숙련도
* CBO (Cost Based Optimizer, 비용 기반 옵티마이저)
# 액세스 비용을 기준으로 최적화
# 성능 기준 : 옵티마이저의 예측 성능
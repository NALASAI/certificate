소스 코드 최적화
- 나쁜 코드를 배제하고 클린 코드로 작성하는 것
- 클린 코드 (Clean Code) : 누구나 쉽게 이해하고 수정 및 추가할 수 있는 단순, 명료하게 잘 작성된 코드
- 나쁜 코드 (Bad Code) : 로직이 얽혀 있는 스파게티 코드나 복잡하고 이해하기 어려운 코드
- 클린 코드 작성 원칙
* 가독성 : 누구든지 코드를 쉽게 읽을 수 있도록 작성
* 단순성 : 한 번에 한 가지를 처리하도록 코드 작성
* 의존성 배제 : 코드 변경 시 다른 부분에 영향이 없도록 작성
* 중복성 최소화 : 중복된 코드는 삭제하고 공통된 코드 사용
* 추상화

소스 코드 최적화 유형
- 클래스 분할 배치
* 하나의 클래스는 하나의 역할만 수행하도록 응집도를 높이고 크기를 작게 작성
- 느슨한 결합 (Loosely Coupled)
* 인터페이스 클래스를 이용하여 추상화된 자료 구조와 메소드 구현
* 클래스 간 의존성 최소화
- 코딩 형식 준수
- 좋은 이름 사용
* Naming Rule
- 적절한 주석문 사용

소스 코드 품질 분석 도구
- 정적 분석 도구
* 작성한 코드를 실행하지 않고 코딩 스타일이나 결함 등을 확인
* 개발 초기의 결함을 찾는데 사용되고, 개발 완료 시점에서는 코드의 품질을 검증하는 차원에서 사용
- 동적 분석 도구
* 작성한 코드를 실행하여 코드에 존재하는 메모리 누수, 스레드 결함 등을 분석
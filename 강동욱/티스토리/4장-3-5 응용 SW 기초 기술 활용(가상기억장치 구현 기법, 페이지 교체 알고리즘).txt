가상기억장치의 개요
- 보조기억장치 일부를 주기억장치처럼 사용하는 것으로, 용량이 작은 주기억장치를 마치 큰 용량을 가진 것처럼 사용하는 기법
- 프로그램을 작은 블록 단위로 나누어서 가상기억장치에 보관해 놓고, 프로그램 실행 시 요구되는 블록만 주기억장치에 불연속적으로 할당
- 주기억장치의 이용률과 다중 프로그래밍의 효율을 높일 수 있음
- 가상기억장치의 주소를 주기억장치의 주소로 바꾸는 주소 변환 작업 필요
- 구현 방법
* 페이징 기법
* 세그먼테이션 기법

페이징 (Paging) 기법
- 가상기억장치에 보관되어 있는 프로그램과 주기억장치의 영역을 동일한 크기로 나눈 후 주기억장치 영역에 적재시켜 실행
- 페이지 : 프로그램을 일정한 크기로 나눈 단위
- 페이지 프레임 : 페이지 크기로 일정하게 나누어진 주기억장치의 단위
- 외부 단편화는 발생하지 않으나 내부 단편화는 발생할 수 있음
- 주소 변환을 위해 페이지 위치 정보를 갖고 있는 페이지 맵 테이블 필요

세그먼테이션 (Segmentation) 기법
- 가상기억장치에 보관되어 있는 프로그램을 다양한 크기의 논리적인 단위로 나눈 후 주기억장치 영역에 적재시켜 실행
- 세그먼트 : 프로그램을 배열이나 함수 등과 같은 논리적인 크기로 나눈 단위
- 내부 단편화는 발생하지 않으나 외부 단편화는 발생할 수 있음
- 주소 변환을 위해 세그먼트 위치 정보를 갖고 있는 세그먼트 맵 테이블 필요

페이지 교체 알고리즘
- 페이지 부재 시 가상기억장치의 필요한 페이지를 주기억장치에 적재해야 함
- 이때 주기억장치의 모든 페이지 프레임이 사용중이면 어떤 페이지 프레임을 교체할 것인지를 결정하는 기법
- OPT (OPTimal replacement, 최적 교체)
* 앞으로 가장 오랫동안 사용하지 않을 페이지를 교체하는 기법
* 페이지 부재 횟수가 가장 적게 발생하는 효율적인 알고리즘
- FIFO (First In First Out)
* 가장 오래 있었던 페이지를 교체하는 기법
* ex) 할당된 페이지 프레임의 수가 4개이고, 이들 페이지 프레임은 모두 비어있다고 가정할 경우 FIFO기법으로는 몇번의 페이지 부재가 발생하는가?
* 참조 페이지 번호 : 0 1 2 3 0 1 4 0 1 2 3 4 
* 0	1	2	3	0	1	4	0	1	2	3	4
* ---------------------------------------------------------------------------------------------------------------------
* 0	0	0	0	0	0	4	4	4	4	3	3
* 	1	1	1	1	1	1	0	0	0	0	4
* 		2	2	2	2	2	2	1	1	1	1
* 			3	3	3	3	3	3	2	2	2
* ---------------------------------------------------------------------------------------------------------------------
* 1	2	3	4	X	X	5	6	7	8	9	10
* 총 10번의 페이지 부재가 발생하였다
- LRU (Least Recently Used)
* 최근에 가장 오랫동안 사용하지 않은 페이지를 교체하는 기법
* 즉, 가장 오래 전에 사용된 페이지를 교체
* ex) 할당된 페이지 프레임의 수가 4개이고, 이들 페이지 프레임은 모두 비어있다고 가정할 경우 LRU기법으로는 몇번의 페이지 부재가 발생하는가?
* 참조 페이지 번호 : 0 1 2 3 0 1 4 0 1 2 3 4 
* 0	1	2	3	0	1	4	0	1	2	3	4
* ---------------------------------------------------------------------------------------------------------------------
* 0	0	0	0	0	0	0	0	0	0	0	4
* 	1	1	1	1	1	1	1	1	1	1	1
* 		2	2	2	2	4	4	4	4	3	3
* 			3	3	3	3	3	3	2	2	2
* ---------------------------------------------------------------------------------------------------------------------
* 1	2	3	4	X	X	5	X	X	6	7	8
* 총 8번의 페이지 부재 발생
* 이미 존재하는 값이 나와 중복되는 경우 사용된걸로 간주한다
- LFU (Least Frequently Used)
* 사용 빈도가 가장 적은 페이지를 교체하는 기법
* 활발하게 사용되는 페이지는 사용 횟수가 많아 교체되지 않고 사용
* ex) 할당된 페이지 프레임의 수가 4개이고, 이들 페이지 프레임은 모두 비어있다고 가정할 경우 LFU기법으로는 몇번의 페이지 부재가 발생하는가?
* 참조 페이지 번호 : 0 1 2 3 0 1 4 0 1 2 3 4 
* 0	1	2	3	0	1	4	0	1	2	3	4
* ---------------------------------------------------------------------------------------------------------------------
* 0	0	0	0	0	0	0	0	0	0	0	0
* 	1	1	1	1	1	1	1	1	1	1	1
* 		2	2	2	2	4	4	4	4	3	3
* 			3	3	3	3	3	3	2	2	4
* ---------------------------------------------------------------------------------------------------------------------
* 1	2	3	4	X	X	5	X	X	6	7	8
* 총 8번의 페이지 부재 발생
- NUR (Not Used Recently)
* 최근에 사용하지 않은 페이지를 교체하는 기법 (LRU와 비슷)
* 최근 사용 여부를 확인하기 위해 각 페이지마다 참조 비트와 변형 비트 사용
- SCR (Second Chance Replacement, 2차 기회 교체)
* 가장 오랫동안 주기억장치에 있던 페이지 중 자주 사용되는 페이지의 교체를 방지하기 위한 것
* FIFO 기법의 단점을 보완